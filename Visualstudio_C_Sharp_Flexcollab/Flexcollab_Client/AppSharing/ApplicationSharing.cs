using System;
using System.Collections;
using System.ComponentModel;
using System.Drawing;
using System.Text;
using System.Data;
using System.Windows.Forms;
using WebMeeting.Client;
using System.IO;
using WebMeeting.Common;
using WebMeeting;
using System.Runtime.InteropServices;
using System.Threading;
using System.Diagnostics;
using mshtml;
using MsHtmHstInterop;
using CommonOfProcessList;
using TaskbarSorter;
using System.Globalization;





namespace WebMeeting
{

	/// <summary>
	/// Summary description for ApplicationSharing.
	/// </summary>
	public class ApplicationSharing :System.Windows.Forms.UserControl, IDocHostUIHandler
	{
	
		
		public bool isDesktopSharing = false;
		public bool isEntireDesktopSharing = false;
		public WebMeetingDrawingBoard.WhiteboardControl whiteBoard;        		
		public int nWindowWidth;
		public bool isSetupBrowser=false;
		public int nWindowHeight;
		public int nSessionID =-1;
		private WebMeeting.Client.Minuts_Meeting.Minuts_Controller MM_Controller=new WebMeeting.Client.Minuts_Meeting.Minuts_Controller();
		Hashtable hash=Hashtable.Synchronized(new Hashtable());

		// Useless Code 
		public static ArrayList keyArray1=new ArrayList();


		private AxSHDocVw.AxWebBrowser axWebBrowser1;
		public System.Int32	CurrentProcessID;
		private System.Windows.Forms.Panel panel1;
		public event CloseAppShare appShareClose;		
		public bool bIsAppSharingStarted=false;
		public int counter=0;
		//public bool DocInitialized;
	
		Client.AppSharing.SharedWindowHostFrm  frmHostWindow;
		private const int USER_CLOSE_FORM=5600; /*user defined message to stop other forms*/
		private System.IntPtr HostWindowHandle=(System.IntPtr)0;


		# region for nodetree
		ITree _Tree = NodeTree.NewTree( typeof( DataBase ) );
		IntPtr _ToolbarWindowHandle = IntPtr.Zero;
		bool _Glomming = true;			
		Setting Glomming = new Setting( @"Software\Microsoft\Windows\CurrentVersion", @"Explorer\Advanced", "TaskbarGlomming", 1 );
		# endregion for nodetree

		private System.Timers.Timer AutoRefresh;
		private NSPAControls.NSButton btnLog;
		
		
		
		// This Code is useless 
		ArrayList keyArray=ArrayList.Synchronized(keyArray1);

		
		
		public int controlOwnerId=0;
		private int CurrentAppShareProcessId=-1;		
		private Custom pictureBox1;
		public AppSharing appServer;
		public bool bSendActivity = false;
		public bool bIsServer;
		long lasttime=System.Environment.TickCount;
		public NetworkManager network ;
		private System.Windows.Forms.ColumnHeader columnHeader1;
		private System.Windows.Forms.ColumnHeader columnHeader2;
		public NSPAControls.NSButton btnShare;
		
		private Thread sendingThread;
		private ArrayList sendingList = new ArrayList();
		private System.Windows.Forms.Label lblINfo;
		private Thread KeyboardSendingThread;
		private string strProcessHtm="";
		UserActivityHook userActivityHook;

		
		// ////////////////////////////// Mouse Hook/////////////////////////
		public delegate int HookProc(int nCode, IntPtr wParam, IntPtr lParam);
		//Declare the hook handle as an int.
		static int hHook = 0;
		
		//Declare MouseHookProcedure as a HookProc type.
		Win32.USER32.HookProc MouseHookProcedure;

		//Declare the wrapper managed POINT class.
		[StructLayout(LayoutKind.Sequential)]
			public class POINT
		{
			public int x;
			public int y;
		}

		//For Registering and UnRegistering the hotkey
		#region Parameters Information	RegisterHotKey			
		/*
			hWnd
				[in] Handle to the window that will receive WM_HOTKEY messages generated by the hot key. If this parameter is NULL, WM_HOTKEY messages are posted to the message queue of the calling thread and must be processed in the message loop. 
			id
				[in] Specifies the identifier of the hot key. No other hot key in the calling thread should have the same identifier. An application must specify a value in the range 0x0000 through 0xBFFF. A shared dynamic-link library (DLL) must specify a value in the range 0xC000 through 0xFFFF (the range returned by the GlobalAddAtom function). To avoid conflicts with hot-key identifiers defined by other shared DLLs, a DLL should use the GlobalAddAtom function to obtain the hot-key identifier. 
			fsModifiers
				[in] Specifies keys that must be pressed in combination with the key specified by the uVirtKey parameter in order to generate the WM_HOTKEY message. The fsModifiers parameter can be a combination of the following values.

				MOD_ALT
					Either ALT key must be held down.
				MOD_CONTROL
					Either CTRL key must be held down.
				MOD_SHIFT
					Either SHIFT key must be held down.
				MOD_WIN
					Either WINDOWS key was held down. These keys are labeled with the Microsoft Windows logo.

			vk
				[in] Specifies the virtual-key code of the hot key. 
			Return Value

			If the function succeeds, the return value is nonzero.

			If the function fails, the return value is zero. To get extended error information, call GetLastError.
		*/
		#endregion
		#region Parameters Information UnRegisterHotKey
		/*		Parameters

					hWnd
					[in] Handle to the window associated with the hot key to be freed. This parameter should be NULL if the hot key is not associated with a window. 
					id
					[in] Specifies the identifier of the hot key to be freed. 

				Return Value
					If the function succeeds, the return value is nonzero.
					If the function fails, the return value is zero. To get extended error information, call GetLastError.
		*/															  
		#endregion
		
		private const byte ModAlt = 1, ModControl = 2, ModShift = 4, ModWin = 8;
		private static int HiWord(int number)//for getting High Word like c++ macro
		{
			try
			{
				if ((number & 0x80000000) == 0x80000000)
					return (number >> 16);
				else
					return (number >> 16) & 0xffff ;
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare private static int HiWord(int number) ",ex,"",false);
				return -1;
			}
		}

		private static int LoWord(int number)//for getting Low Word like c++ macro
		{
			try
			{
				return number & 0xffff;
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare  private static int LoWord(int number)",ex,"",false);
				return -1;
			}
		}
		private bool RegisterKeys()/*Register F4 & F3 key */ 
		{
			
			byte modifieKey=0;
			bool successF3,successF4;
			try
			{			
				successF3= Win32.USER32.RegisterHotKey(this.Handle, this.GetType().GetHashCode(), modifieKey,Convert.ToInt16(System.Windows.Forms.Keys.F3));
				successF4= Win32.USER32.RegisterHotKey(this.Handle, this.GetType().GetHashCode()+1, modifieKey,Convert.ToInt16(System.Windows.Forms.Keys.F4));
				if (successF3 & successF4)
				{
					//Debug.WriteLine(successF3.ToString()+ "F3" + successF4.ToString() + "F4");
					return true;
				}
				else
					return false;
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare  private bool RegisterKeys() ",ex,"",false);				
				return false;
			}
		}
		private void UnRegisterKeys()/*UnRegister F4 & F3 key */ 
		{
			try
			{
				Win32.USER32.UnregisterHotKey(this.Handle, this.GetType().GetHashCode());
				Win32.USER32.UnregisterHotKey(this.Handle, this.GetType().GetHashCode()+1);	
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare  private void UnRegisterKeys()",ex,"",false);
			}
		}
		protected override void WndProc(ref Message m)
		{/*Handle hotkey message here*/
			try
			{

				if (m.Msg == Win32.USER32.WM_HOTKEY)
				{/*
			  * WM_HOTKEY
			  * fuModifiers = (UINT) LOWORD(lParam);        fuModifiers = ALT | CTRL | SHIFT | WindowKey
			  * uVirtKey = (UINT) HIWORD(lParam);			uVirtKey= a-z | function key like f1 f2
			  */
					//Trace.WriteLine("System Wide Hot Key is Registered Successfully");
					//System.Diagnostics.Process pProcess = System.Diagnostics.Process.GetProcessById(CurrentAppShareProcessId);
					//Trace.WriteLine("Hotkey Message");
					if(HiWord(m.LParam.ToInt32()) == Convert.ToInt16(System.Windows.Forms.Keys.F4))/*Retur to Application Share*/
					{
						this.frmHostWindow.TopMost=true;
						this.frmHostWindow.WindowState=System.Windows.Forms.FormWindowState.Normal;
						//SendTakenAnnotationRightsBackMessage();
						//ShowWindow(this.frmHostWindow.Handle, SW_SHOWMAXIMIZED); 			
					}
					if(HiWord(m.LParam.ToInt32()) == Convert.ToInt16(System.Windows.Forms.Keys.F3))/*Return to Annotation*/
					{					
						this.frmHostWindow.TopMost=false;
						this.frmHostWindow.WindowState=System.Windows.Forms.FormWindowState.Minimized;

						//SendMessage(this.frmHostWindow.Handle,SW_SHOWMINIMIZED,(System.IntPtr)0,(System.IntPtr)0);
						//ShowWindow(this.frmHostWindow.Handle, SW_SHOWMINIMIZED); //Minimize the app share
						Client.ClientUI.getInstance().Activate();//activate our application
						//					Process.GetCurrentProcess();//get curren process
						Win32.USER32.ShowWindow(Process.GetCurrentProcess().MainWindowHandle, Win32.USER32.SW_SHOWMAXIMIZED); //maxmimize our application
					}				
					//this.Show();
				}
				base.WndProc(ref m);
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare  protected override void WndProc(ref Message m)",ex,"",false);
			}
		}		

		/// <summary>
		/// When u are in F4 Mode the other attendees cant do annotyation this function takes rights back from them 
		/// </summary>
		public void SendTakenAnnotationRightsBackMessage()
		{
			try
			{
				Trace.WriteLine("SendTakenAnnotationRightsBackMessage()");
				WebMeeting.Client.ClientUI objClientUi=WebMeeting.Client.ClientUI.getInstance();
				bool bIsHostPresenter=false;
				if(network.profile.clientType==ClientType.ClientHost)
				{
					if(objClientUi.ifHostisPresenter())
					{
						bIsHostPresenter=true;
					}
				}
				ClientProfile ProfileFromList;				
//				lock(objClientUi.arrayParticipents)
//				{
					/*get number of participants in the meeting*/
					int itemsCount=objClientUi.arrayParticipents.Count;
					Trace.WriteLine("No of Users in List" + itemsCount.ToString());

					for(int i=0;i<itemsCount;i++)
					{
						ProfileFromList=(ClientProfile)objClientUi.arrayParticipents[i];
						if(bIsHostPresenter)
						{/*send message except host because host is presenter*/
							if(ProfileFromList.clientType!=ClientType.ClientHost)
							{
								if(ProfileFromList.clientAccess.annotationRights)//don't send message if participant don't have annotation rights 
								{
									ProfileFromList.clientAccess.annotationRights=false;
									objClientUi.SendClientProfileUpdateMessage(ProfileFromList);
								}
							}	
						}
						else
						{/*send message to all except presenter because host is not presenter*/
							if(ProfileFromList.clientType!=ClientType.ClientPresenter)
							{
								if(ProfileFromList.clientAccess.annotationRights)//don't send message if participant don't have annotation rights
								{
									ProfileFromList.clientAccess.annotationRights=false;
									objClientUi.SendClientProfileUpdateMessage(ProfileFromList);
								}
							}
						}									
					}
//				}									
				Trace.WriteLine("exit from SendTakenAnnotationRightsBackMessage()");
				//pClient.arrayParticipents.Insert(v.Index,clientProf);
			}
			catch(Exception ex)
			{
				ex=ex;
			}
				
		}
		public void startMouseHook()
		{
			try
			{
				isEntireDesktopSharing = true;
				// Create an instance of HookProc.
				MouseHookProcedure = new Win32.USER32.HookProc(MouseHookProc);

				hHook = Win32.USER32.SetWindowsHookEx(Win32.USER32.WH_MOUSE_LL, (Win32.USER32.HookProc)MouseHookProcedure, Marshal.GetHINSTANCE(	System.Reflection.Assembly.GetExecutingAssembly().GetModules()[0]), 0);
				//If the SetWindowsHookEx function fails.
				if(hHook == 0 )
				{
					stopMouseHook();
					//MessageBox.Show("SetWindowsHookEx Failed");
					return;
				}
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare  public void startMouseHook()",ex,"",false);
			}
		}

		public void stopMouseHook()
		{
			try
			{
				isEntireDesktopSharing = false;
				bool ret = Win32.USER32.UnhookWindowsHookEx(hHook);
				//If the UnhookWindowsHookEx function fails.
				if(ret == false )
				{
					//MessageBox.Show("UnhookWindowsHookEx Failed");
					return;
				}
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare  public void stopMouseHook()",ex,"",false);
			}
		}

		public static int gX = 0, gY = 0;

		public static int MouseHookProc(int nCode, IntPtr wParam, IntPtr lParam)
		{
			try
			{

				Win32.USER32.MouseHookStruct MyMouseHookStruct = (Win32.USER32.MouseHookStruct) Marshal.PtrToStructure(lParam, typeof(Win32.USER32.MouseHookStruct));
				//Marshall the data from the callback.
				if (nCode < 0)
				{
					return Win32.USER32.CallNextHookEx(hHook, nCode, wParam, lParam);
				}
				else
				{
					// x cor
					gX =  MyMouseHookStruct.pt.x ;
					// y cor
					gY =  MyMouseHookStruct.pt.y ;

					return Win32.USER32.CallNextHookEx(hHook, nCode, wParam, lParam);
				}
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare  public static int MouseHookProc(int nCode, IntPtr wParam, IntPtr lParam)",ex,"",false);
				//				ex=ex;
			}
			return 0;//CallNextHookEx(hHook, nCode, wParam, lParam);
			
		}

		private System.Collections.ArrayList keyboardEventsQueue = new System.Collections.ArrayList();
		private System.IO.StreamWriter sw;
		private System.Windows.Forms.Button button1;
		private WebMeeting.Custom custom1;
		/// <summary>	
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.Container components = null;

		~ApplicationSharing()
		{
		
		}

		public ApplicationSharing()
		{
			try
			{
				// This call is required by the Windows.Forms Form Designer.
				InitializeComponent();
			}
			catch(Exception ex)
			{	
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare  public ApplicationSharing()",ex,"",false);					
			}
			// TODO: Add any initialization after the InitializeComponent call
			try
			{
				RefreshDoIt = new RefreshEx(RefreshWindow);
				NetworkManager.getInstance().isNewAttendee = false;
				mPreviousImage  = null;
			}
			catch(Exception ex )
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare  public ApplicationSharing()",ex,"",false);
			}
			
		}

		
		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		protected override void Dispose( bool disposing )
		{
			if( disposing )
			{
				if(components != null)
				{
					components.Dispose();
				}
			}
			base.Dispose( disposing );
		}

		private void SetUpWebBrowser()
		{//setup Broser Control by programming.
			try
			{
				System.Resources.ResourceManager resources = new System.Resources.ResourceManager(typeof(ApplicationSharing));
				this.axWebBrowser1 = new AxSHDocVw.AxWebBrowser();
				((System.ComponentModel.ISupportInitialize)(this.axWebBrowser1)).BeginInit();
				this.axWebBrowser1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
					| System.Windows.Forms.AnchorStyles.Left) 
					| System.Windows.Forms.AnchorStyles.Right)));
				this.axWebBrowser1.Enabled = true;
				this.axWebBrowser1.Location = new System.Drawing.Point(0, 0);
				this.axWebBrowser1.OcxState = ((System.Windows.Forms.AxHost.State)(resources.GetObject("axWebBrowser1.OcxState")));
				this.axWebBrowser1.Size = new System.Drawing.Size(376, 280);
				this.axWebBrowser1.TabIndex = 6;
				this.axWebBrowser1.Visible=false;
				this.axWebBrowser1.DocumentComplete += new AxSHDocVw.DWebBrowserEvents2_DocumentCompleteEventHandler(this.AppShare_DocumentComplete);
				this.Controls.Add(this.axWebBrowser1);
				((System.ComponentModel.ISupportInitialize)(this.axWebBrowser1)).EndInit();
				isSetupBrowser=true;
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare  private void SetUpWebBrowser()",ex,"",false);
			}
			
		}
		#region Component Designer generated code
		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent()
		{
			System.Resources.ResourceManager resources = new System.Resources.ResourceManager(typeof(ApplicationSharing));
			this.pictureBox1 = new WebMeeting.Custom();
			this.columnHeader1 = new System.Windows.Forms.ColumnHeader();
			this.columnHeader2 = new System.Windows.Forms.ColumnHeader();
			this.btnShare = new NSPAControls.NSButton();
			this.btnLog = new NSPAControls.NSButton();
			this.lblINfo = new System.Windows.Forms.Label();
			this.button1 = new System.Windows.Forms.Button();
			this.custom1 = new WebMeeting.Custom();
			this.panel1 = new System.Windows.Forms.Panel();
			this.AutoRefresh = new System.Timers.Timer();
			((System.ComponentModel.ISupportInitialize)(this.AutoRefresh)).BeginInit();
			this.SuspendLayout();
			// 
			// pictureBox1
			// 
			this.pictureBox1.BackColor = System.Drawing.Color.White;
			this.pictureBox1.Location = new System.Drawing.Point(0, 0);
			this.pictureBox1.Name = "pictureBox1";
			this.pictureBox1.Size = new System.Drawing.Size(392, 352);
			this.pictureBox1.SizeMode = System.Windows.Forms.PictureBoxSizeMode.AutoSize;
			this.pictureBox1.TabIndex = 0;
			this.pictureBox1.TabStop = false;
			this.pictureBox1.MouseUp += new System.Windows.Forms.MouseEventHandler(this.pictureBox1_MouseUp);
			this.pictureBox1.Paint += new System.Windows.Forms.PaintEventHandler(this.pictureBox1_Paint);
			this.pictureBox1.DoubleClick += new System.EventHandler(this.pictureBox1_DoubleClick);
			this.pictureBox1.MouseDown += new System.Windows.Forms.MouseEventHandler(this.pictureBox1_MouseDown);
			// 
			// columnHeader1
			// 
			this.columnHeader1.Text = "Title";
			this.columnHeader1.Width = 294;
			// 
			// columnHeader2
			// 
			this.columnHeader2.Text = "Executable";
			this.columnHeader2.Width = 293;
			// 
			// btnShare
			// 
			this.btnShare.Anchor = System.Windows.Forms.AnchorStyles.Bottom;
			this.btnShare.ButtonForm = NSPAControls.eButtonForm.Rectangle;
			this.btnShare.HighlightColor = System.Drawing.SystemColors.HotTrack;
			this.btnShare.HottrackImage = ((System.Drawing.Image)(resources.GetObject("btnShare.HottrackImage")));
			this.btnShare.Location = new System.Drawing.Point(16, 312);
			this.btnShare.Name = "btnShare";
			this.btnShare.NormalImage = ((System.Drawing.Image)(resources.GetObject("btnShare.NormalImage")));
			this.btnShare.OnlyShowBitmap = false;
			this.btnShare.PressedImage = ((System.Drawing.Image)(resources.GetObject("btnShare.PressedImage")));
			this.btnShare.Size = new System.Drawing.Size(54, 24);
			this.btnShare.TextAlign = NSPAControls.eTextAlign.Bottom;
			this.btnShare.ToolTip = null;
			this.btnShare.Click += new System.EventHandler(this.btnShare_Click);
			// 
			// btnLog
			// 
			this.btnLog.Anchor = System.Windows.Forms.AnchorStyles.Bottom;
			this.btnLog.ButtonForm = NSPAControls.eButtonForm.Rectangle;
			this.btnLog.HighlightColor = System.Drawing.SystemColors.HotTrack;
			this.btnLog.HottrackImage = ((System.Drawing.Image)(resources.GetObject("btnLog.HottrackImage")));
			this.btnLog.Location = new System.Drawing.Point(80, 312);
			this.btnLog.Name = "btnLog";
			this.btnLog.NormalImage = ((System.Drawing.Image)(resources.GetObject("btnLog.NormalImage")));
			this.btnLog.OnlyShowBitmap = true;
			this.btnLog.PressedImage = ((System.Drawing.Image)(resources.GetObject("btnLog.PressedImage")));
			this.btnLog.Size = new System.Drawing.Size(56, 24);
			this.btnLog.Text = "Logg";
			this.btnLog.TextAlign = NSPAControls.eTextAlign.Bottom;
			this.btnLog.ToolTip = null;
			this.btnLog.Click += new System.EventHandler(this.btnLog_Click);
			// 
			// lblINfo
			// 
			this.lblINfo.Anchor = System.Windows.Forms.AnchorStyles.None;
			this.lblINfo.BackColor = System.Drawing.Color.DeepSkyBlue;
			this.lblINfo.Font = new System.Drawing.Font("Tahoma", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
			this.lblINfo.ForeColor = System.Drawing.SystemColors.ControlLightLight;
			this.lblINfo.Location = new System.Drawing.Point(0, 0);
			this.lblINfo.Name = "lblINfo";
			this.lblINfo.Size = new System.Drawing.Size(0, 0);
			this.lblINfo.TabIndex = 3;
			this.lblINfo.Text = "Double click on the application you want to share";
			this.lblINfo.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			this.lblINfo.Visible = false;
			// 
			// button1
			// 
			this.button1.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
			this.button1.BackColor = System.Drawing.Color.White;
			this.button1.BackgroundImage = ((System.Drawing.Image)(resources.GetObject("button1.BackgroundImage")));
			this.button1.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.button1.Location = new System.Drawing.Point(72, 320);
			this.button1.Name = "button1";
			this.button1.Size = new System.Drawing.Size(54, 22);
			this.button1.TabIndex = 2;
			this.button1.Visible = false;
			// 
			// custom1
			// 
			this.custom1.Location = new System.Drawing.Point(-8, 0);
			this.custom1.Name = "custom1";
			this.custom1.Size = new System.Drawing.Size(392, 352);
			this.custom1.SizeMode = System.Windows.Forms.PictureBoxSizeMode.AutoSize;
			this.custom1.TabIndex = 0;
			this.custom1.TabStop = false;
			// 
			// panel1
			// 
			this.panel1.Location = new System.Drawing.Point(8, 8);
			this.panel1.Name = "panel1";
			this.panel1.Size = new System.Drawing.Size(368, 288);
			this.panel1.TabIndex = 6;
			// 
			// AutoRefresh
			// 
			this.AutoRefresh.SynchronizingObject = this;
			// 
			// ApplicationSharing
			// 
			this.AutoScroll = true;
			this.BackColor = System.Drawing.Color.White;
			this.Controls.Add(this.panel1);
			this.Controls.Add(this.lblINfo);
			this.Controls.Add(this.btnShare);
			this.Controls.Add(this.btnLog);
			this.Controls.Add(this.pictureBox1);
			this.Controls.Add(this.button1);
			this.Controls.Add(this.custom1);
			this.Font = new System.Drawing.Font("Tahoma", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
			this.Name = "ApplicationSharing";
			this.Size = new System.Drawing.Size(392, 352);
			((System.ComponentModel.ISupportInitialize)(this.AutoRefresh)).EndInit();
			this.ResumeLayout(false);

		}
		#endregion

		
		public void ExternalAnchoreClick(string str)
		{
			try
			{
				//HTMLAnchorElement HtmAnchor= (HTMLAnchorElement)e.srcElement;			
				//string str=HtmAnchor.name;	
				
				appServer.isWaitingPic = true;
				mPreviousImage = null;
				int nProcessId = Convert.ToInt32(str);
				CurrentAppShareProcessId=nProcessId;
				this.LaunchProcess(Convert.ToInt32(str));
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare public void ExternalAnchoreClick(string str)",ex,"",false);
				//Trace.WriteLine("Exception Occur at " + ex.ToString() + ex.StackTrace + ex.Message);
				//ex=ex;
			}
		}
		private bool AnchorClick(IHTMLEventObj e)
		{//for anchor onclick handling					
			//if the event bubbles and is cancellable, return VARIANT_TRUE to prevent 	the event from bubbling 
			//to other event handlers in the document tree. Return VARIANT_FALSE to allow bubbling
			try
			{
				HTMLAnchorElement HtmAnchor= (HTMLAnchorElement)e.srcElement;			
				string str=HtmAnchor.name;	
				appServer.isWaitingPic = true;
				mPreviousImage = null;
				int nProcessId = Convert.ToInt32(str);
				CurrentAppShareProcessId=nProcessId;
				this.LaunchProcess(Convert.ToInt32(str));
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare private bool AnchorClick(IHTMLEventObj e)",ex,"",false);
			}
			return true;
			
		}

		public void ExternalProcessRefreshMethod()
		{
			try
			{
				this.btnRefresh_Click(null,null);	
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare 		public void ExternalProcessRefreshMethod()",ex,"",false);
			}
			//return true;
		}
		private bool ButtonClick(IHTMLEventObj e)
		{//for refreshbutton onclick  
			//if the event bubbles and is cancellable, return VARIANT_TRUE to prevent 	the event from bubbling 
			//to other event handlers in the document tree. Return VARIANT_FALSE to allow bubbling
			try
			{
				this.btnRefresh_Click(null,null);	
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare 	private bool ButtonClick(IHTMLEventObj e)",ex,"",false);
			}
			return true;
		}
	
		#region IDocHostUIHandler Implementations
		
		
		
		void IDocHostUIHandler.EnableModeless(int fEnable)
		{
		        
		}
		        
		void IDocHostUIHandler.FilterDataObject(MsHtmHstInterop.IDataObject pDO, out MsHtmHstInterop.IDataObject ppDORet)
		{
			try
			{
				ppDORet = null;
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare void IDocHostUIHandler.FilterDataObject(MsHtmHstInterop.IDataObject pDO, out MsHtmHstInterop.IDataObject ppDORet)",ex,"",false);
				ppDORet = null;
			}
		}
		        
		void IDocHostUIHandler.GetDropTarget(IDropTarget pDropTarget, out IDropTarget ppDropTarget)
		{
			try
			{
			
				ppDropTarget = null;
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare void IDocHostUIHandler.GetDropTarget(IDropTarget pDropTarget, out IDropTarget ppDropTarget)",ex,"",false);
				ppDropTarget = null;
			}
		}
		        
		void IDocHostUIHandler.GetExternal(out object ppDispatch)
		{
			try
			{
				ppDispatch = this;//new PopulateWindow1(this);
			}			
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare void IDocHostUIHandler.GetExternal(out object ppDispatch)",ex,"",false);
				ppDispatch = null;
			}
			
		}
		        
		void IDocHostUIHandler.GetHostInfo(ref _DOCHOSTUIINFO pInfo)
		{
		            
		}
		        
		void IDocHostUIHandler.GetOptionKeyPath(out string pchKey, uint dw)
		{
			try
			{
				pchKey = null;
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare void IDocHostUIHandler.GetOptionKeyPath(out string pchKey, uint dw)",ex,"",false);
				pchKey = null;
			}
		}
		        
		void IDocHostUIHandler.HideUI()
		{
		        
		}
		        
		void IDocHostUIHandler.OnDocWindowActivate(int fActivate)
		{
		        
		}
		        
		void IDocHostUIHandler.OnFrameWindowActivate(int fActivate)
		{
		        
		}
		        
		void IDocHostUIHandler.ResizeBorder(ref MsHtmHstInterop.tagRECT prcBorder, IOleInPlaceUIWindow pUIWindow, int fRameWindow)
		{
		        
		}
		        
		void IDocHostUIHandler.ShowContextMenu(uint dwID, ref MsHtmHstInterop.tagPOINT ppt, object pcmdtReserved, object pdispReserved)
		{
			try
			{
				throw new COMException("", 1);
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare 		void IDocHostUIHandler.ShowContextMenu(uint dwID, ref MsHtmHstInterop.tagPOINT ppt, object pcmdtReserved, object pdispReserved)",ex,"",false);
			}			
		}
		        
		void IDocHostUIHandler.ShowUI(uint dwID, IOleInPlaceActiveObject pActiveObject, IOleCommandTarget pCommandTarget, IOleInPlaceFrame pFrame, IOleInPlaceUIWindow pDoc)
		{
		        
		}
		        
		void IDocHostUIHandler.TranslateAccelerator(ref tagMSG lpmsg, ref Guid pguidCmdGroup, uint nCmdID)
		{
		        
		}
		        
		void IDocHostUIHandler.TranslateUrl(uint dwTranslate, ref ushort pchURLIn, IntPtr ppchURLOut)
		{
		        
		}
		        
		void IDocHostUIHandler.UpdateUI()
		{
		        
		}
		#endregion

		private void WriteHtmFile()
		{		
			//1...get pre part of the txt file
			//2...get post part of the txt file
			//3...copy middle part of the file
			//4...Write text to htm
			try
			{                
				// create a writer and open the file
				if(!File.Exists(Application.StartupPath + "\\Process.htm"))
				{
					//
					FileStream fs=File.Create(Application.StartupPath + "\\Process.htm");
					fs.Close();
				}
				else
				{
					//File.Delete(Application.StartupPath+ "\\Process.htm");
					//FileStream fs=File.Create(Application.StartupPath + "\\Process.htm");
					//fs.Close();
					
				}
				
				TextWriter tw =new StreamWriter(Application.StartupPath + "\\Process.htm");			
				//Write pre part of htm
				TextReader tr = new StreamReader(Application.StartupPath +"\\preHtm.txt");
				tw.Write(tr.ReadToEnd());
				tr.Close();//preHtm.txt
				
				//write the processnames
				tw.Write(this.strProcessHtm);
			
				//write post part of htm
				TextReader tr1 = new StreamReader(Application.StartupPath +"\\PostHtm.txt");
				tw.Write(tr1.ReadToEnd());
				tr1.Close();//close PostHtm.txt
			
				tw.Close();//close process.htm
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare private void WriteHtmFile()",ex,"",false);
			}

		}	
		public string AddProccessHtm(string processId, string processname)
		{
			try
			{
				string strprocess="\r\n<tr>\r\n<td>\r\n<table width='100%'  border='0' cellspacing='0' cellpadding='0'>\r\n<tr>\r\n<td width='5%'>\r\n<img src='arrow.gif'>\r\n</td>\r\n<td width='95%' height='25'>\r\n<a href='" 
					+ "' name='"+processId+"' onclick=callHostUI('"+processId+"')>\r\n"+processname +"\r\n</a>\r\n</td>\r\n</tr>\r\n</table>\r\n</td>\r\n</tr>\r\n";
				return strprocess;
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare public string AddProccessHtm(string processId, string processname)",ex,"",false);
				return "";
			}
		}

		private void AppShare_DocumentComplete(object sender, AxSHDocVw.DWebBrowserEvents2_DocumentCompleteEvent e)
		{
			
			try
			{
				SHDocVw.IWebBrowser2 doc1=e.pDisp as SHDocVw.IWebBrowser2;
				if (doc1==(sender as AxSHDocVw.AxWebBrowser).GetOcx())//if document completed
				{
					// Get the document.										
					ICustomDoc cDoc = (ICustomDoc)this.axWebBrowser1.Document;
					if(cDoc!=null)
						cDoc.SetUIHandler((IDocHostUIHandler)this);		
				}
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare 		private void AppShare_DocumentComplete(object sender, AxSHDocVw.DWebBrowserEvents2_DocumentCompleteEvent e)",ex,"",false);
			}
		}
		private void pictureBox1_MouseDown(object sender, System.Windows.Forms.MouseEventArgs e)
		{
			try
			{
				_mousePoint=new Point(e.X,e.Y);
				if(bSendActivity)
				{
					switch(e.Button)
					{
						case MouseButtons.Left:
							appServer.SendMouseActivity(Win32.USER32.WM_LBUTTONDOWN,_mousePoint);
							break;
						case MouseButtons.Right:
							appServer.SendMouseActivity(Win32.USER32.WM_RBUTTONDOWN,_mousePoint);
							break;
					}
				}	
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare private void pictureBox1_MouseDown(object sender, System.Windows.Forms.MouseEventArgs e)",ex,"",false);
			}
		}

		private void pictureBox1_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e)
		{
			try
			{
				if(bSendActivity)
				{
			
					appServer.SendMouseActivity(Win32.USER32.WM_MOUSEMOVE,new Point(e.X,e.Y));
				}
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare private void pictureBox1_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e)",ex,"",false);
			}
		}

		private void pictureBox1_MouseUp(object sender, System.Windows.Forms.MouseEventArgs e)
		{
			try
			{
				if(bSendActivity)
				{
					switch(e.Button)
					{
						case MouseButtons.Left:
							//appServer.AddDebugString("Snding: WM_LBUTTONUP");
							appServer.SendMouseActivity(Win32.USER32.WM_LBUTTONUP,new Point(e.X,e.Y));
							break;
						case MouseButtons.Right:
							//appServer.AddDebugString("Snding: WM_RBUTTONUP");
							appServer.SendMouseActivity(Win32.USER32.WM_RBUTTONUP,new Point(e.X,e.Y));
							break;
					}
				}


			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare private void pictureBox1_MouseUp(object sender, System.Windows.Forms.MouseEventArgs e)",ex,"",false);
			}

		}

		int msgListCount = 0;
		public AppSharingMessageEx  lastMSG ;//= new AppSharingMessageEx ();

		public void SendLastMSG_AppShare()
		{
			try
			{
				if(lastMSG != null)
					SendPacket(ref lastMSG); 
				//syn_sendLastAppImage();
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare public void SendLastMSG_AppShare()",ex,"",false);
			}
		
		}

		public void SendingFunction()
		{
			try
			{
				while(true)
				{
					try
					{
						if((sendingList.Count < 1) && (hash.Values.Count < 1))
						{
							Thread.Sleep(1000);
							continue;
						}
						//					Console.WriteLine("SendingFunction");
						//					Console.WriteLine(" new image has sent using hash  :  " + DateTime.Now.ToString()+ " " +DateTime.Now.Millisecond.ToString());
						//					Console.WriteLine(" sending count :  " + sendingList.Count.ToString());
						if(sendingList.Count > 0 ) 
						{
							StateUpdateMessage msg = new StateUpdateMessage();
							msg.updateType = UpdateTypeCode.UpdateApplicationSharingCompund;
							msg.dataArray = (ArrayList)sendingList.Clone();
							msg.SenderID = NetworkManager.thisInstance.profile.ClientId;
							if(isDesktopSharing)
								NetworkManager.thisInstance.SendAppShareLoadPacket(ref msg,nSessionID);
							else
							{
								NetworkManager.thisInstance.SendAppShareLoadPacket(ref msg,-1); 
							}
							sendingList.Clear(); // by kamran remove messages which are sent
						}					


						#region "This code is not performing any functionality"
						if(this.keyArray.Count > 0)
						{						
							//Trace.WriteLine("this.keyArray.Count : "+ this.keyArray.Count.ToString());

							StateUpdateMessage msg = new StateUpdateMessage();
							msg.updateType = UpdateTypeCode.UpdateApplicationSharingCompund;
							msg.SenderID = NetworkManager.thisInstance.profile.ClientId;		
							ArrayList _list = new ArrayList();
				
							int nCurrentcount = 0;
							for(int i = 0 ; i < this.keyArray.Count;i++,nCurrentcount++)
							{
								string s=(string)keyArray[i];
								_list.Add(hash[s]);										
								msgListCount++;
								hash.Remove(s);
								keyArray.RemoveAt(i);
								i--;
							}
							msg.dataArray = _list;
			
							if(isDesktopSharing)
							{
								NetworkManager.thisInstance.SendDesktopShareLoadPacket(ref msg,nSessionID);
								//NetworkManager.thisInstance.SendAppShareLoadPacket(ref msg,nSessionID);
							}
							else
							{
								NetworkManager.thisInstance.SendAppShareLoadPacket(ref msg,-1 ); 
							}
							_list.Clear();		
							_list = null;
							msgListCount = 0;
						}
					
						hash.Clear();	
						#endregion
					}
					catch(Exception ex)
					{
						WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare public void SendingFunction()",ex,"",false);
					}
				}
			
			}
			catch(System.Threading.ThreadAbortException ex)
			{
				ex=ex;
			}
					
			catch(Exception exp)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare public void SendingFunction()",exp,"",false);
			}
		}
		public void InitializeServer(NetworkManager networkMngr,bool DesktopSharing)
		{
			try
			{
				if(appServer != null)
					appServer.Terminate();
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare public void InitializeServer(NetworkManager networkMngr,bool DesktopSharing)",ex,"",false);
			}
		
			try
			{
				this.appShareClose+=new CloseAppShare(ApplicationSharing_appShareClose);				
				bIsServer=true;
				appServer = new AppSharing(true);			
				appServer.OnDataAvilable +=new OnDataAvilableDelegate(appServer_OnDataAvilable);
				appServer.OnDataAvilableEx+=new OnDataAvilableDelegateEx(appServer_OnDataAvilableEx);
				appServer.OnWindowClosed+=new OnWindowClosedDelegate(appServer_OnWindowClosed);
				network = networkMngr;							
				isDesktopSharing = DesktopSharing;
				if(!DesktopSharing) //  !DesktopSharing is rigth
				{	 // application sharing 					
					this.AutoRefresh.Enabled = true;
					this.AutoRefresh.Interval = 10000;
					this.AutoRefresh.SynchronizingObject = this;
					CurrentProcessID=Process.GetCurrentProcess().MainWindowHandle.ToInt32();
					SelectWindow();
					this.AutoRefresh.Elapsed += new System.Timers.ElapsedEventHandler(this.AutoRefresh_Elapsed);			 		
					pictureBox1.Visible = false;

					btnShare.Visible = false;
					btnLog.Visible = true;
					
					whiteBoard = new WebMeetingDrawingBoard.WhiteboardControl();
					whiteBoard.OnScrolling +=new WebMeetingDrawingBoard.WhiteboardControl.ScrollingDelegate(whiteBoard_OnScrolling);
					//appServer._whiteboard = whiteBoard;
					whiteBoard.IsAppSharingWindow = true;
					whiteBoard.Visible = false;
					whiteBoard.btn_whtLogg.Visible=false;
					//whiteBoard.InitializeToSize(400,400);
					whiteBoard.Dock = DockStyle.Fill;
					whiteBoard.BringToFront();
					this.Controls.Add(whiteBoard);
					whiteBoard.nSessionId = this.nSessionID;
					btnShare.BringToFront();
					btnLog.BringToFront();
					btnLog.Visible=true;
					
					//startMouseHook(); // try to mouse hook
				}
				else
				{	
					this.AutoRefresh.Enabled = false;
					// Desktop sharing 		
					btnShare.Visible = false;
					btnLog.Visible = false;
					appServer.bIsDesktopSharing = true;
					//listView1.Visible = false;
					pictureBox1.Visible = false;
					appServer.SetCaptureWindowAndStartCapturing(Win32.USER32.GetDesktopWindow());
					sendingThread = new Thread(new ThreadStart(SendingFunction));
					sendingThread.Name = "Application Sharing Sending Thread";
					sendingThread.Start();
				}
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare public void InitializeServer(NetworkManager networkMngr,bool DesktopSharing)",ex,"",false);
			}
		}

		
		public void InitializeServer2(NetworkManager networkMngr)
		{
			try
			{
				if(appServer != null)
					appServer.Terminate();
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare public void InitializeServer2(NetworkManager networkMngr)",ex,"",false);
			}
		
			//objMouse = new cMouseHook();
			try
			{
				
				bIsServer=true;
				appServer = new AppSharing(true);			
				appServer.OnDataAvilable +=new OnDataAvilableDelegate(appServer_OnDataAvilable);
				appServer.OnDataAvilableEx+=new OnDataAvilableDelegateEx(appServer_OnDataAvilableEx);
				network = networkMngr;			
				SelectWindow();
				isDesktopSharing = false; // 
			
				btnShare.Visible = false;
				appServer.bIsDesktopSharing = true;
				//listView1.Visible = false;
				pictureBox1.Visible = false;
				appServer.SetCaptureWindowAndStartCapturing(Win32.USER32.GetDesktopWindow());
				sendingThread = new Thread(new ThreadStart(SendingFunction));
				sendingThread.Name = "Desktop Sharing Sending Thread";
				sendingThread.Start();
			
				// hook to mouse
				startMouseHook();
				//			
				// to show cursor on host side
				//
				//			_mouseThread = new Thread(new ThreadStart(this.MouseThreadFunction));		
				//			_mouseThread.Name = "Application Sharing Mouse Movement Thread";
				//			_mouseThread.Start();
			
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare public void InitializeServer2(NetworkManager networkMngr)",ex,"",false);
			}
		}


		Thread _mouseThread;
		public void InitializeClient(NetworkManager networkMngr,bool DesktopSharing)
		{
			try
			{				
				if(appServer!=null)
				{
					appServer.Terminate();
				}	
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare public void InitializeClient(NetworkManager networkMngr,bool DesktopSharing) if(appServer!=null)	{appServer.Terminate();}",ex,"",false);
			}
			try
			{
				if(sendingThread!=null)
				{
					if(sendingThread.IsAlive)
					{
						sendingThread.Abort();
					}
				}
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare public void InitializeClient(NetworkManager networkMngr,bool DesktopSharing) if(sendingThread.IsAlive){sendingThread.Abort();}",ex,"",false);
			}
			try
			{
				lblINfo.Visible = false;
				btnShare.Visible = false;
				bIsServer = false;
				appServer = new AppSharing(false);
				appServer.OnDataAvilable +=new OnDataAvilableDelegate(appServer_OnDataAvilable);
				appServer.OnDataAvilableEx +=new OnDataAvilableDelegateEx(appServer_OnDataAvilableEx);				
				network = networkMngr;
				isDesktopSharing = DesktopSharing;
				//appServer.isWaitingPic = true;

				if(!DesktopSharing)
				{
					whiteBoard = new WebMeetingDrawingBoard.WhiteboardControl();
					whiteBoard.IsAppSharingWindow = true;
					whiteBoard.InitializeToSize(400,400);
					whiteBoard.Dock = DockStyle.Fill;
					whiteBoard.BringToFront();
					this.Controls.Add(whiteBoard);
					pictureBox1.Visible = false;
					whiteBoard.Visible = true;
					whiteBoard.nSessionId = this.nSessionID;
					_mouseThread = new Thread(new ThreadStart(this.MouseThreadFunction));		
					_mouseThread.Start();
					_mouseThread.Name = "Application Sharing Mouse Movement Thread";
			
				}
				if(isDesktopSharing)
				{
			
					appServer.bIsDesktopSharing = true;
					//listView1.Visible = false;
					//pictureBox1.Visible = true;
					this.bSendActivity = true;
					pictureBox1.OnKeyDownEvent += new DelegateKeyActivity(pictureBox1_OnKeyDownEvent);			
					pictureBox1.OnKeyUpEvent += new DelegateKeyActivity(pictureBox1_OnKeyUpEvent);
					//pictureBox1.OnKeyPressEvent +=new DelegateKeyPress(pictureBox1_OnKeyPressEvent);
					//if(networkMngr.profile.clientType == ClientType.ClientHost)  // attendee or presenter can not remote control to host(can not changes of host desktop)
				{
					sendingThread = new Thread(new ThreadStart(SendingFunction));
					sendingThread.Start();
					sendingThread.Name = "Desktop Sharing Sending Thread";

					//				  check for remote contorl 
					KeyboardSendingThread = new Thread(new ThreadStart(this.KeyboardThreadFunction));
					KeyboardSendingThread.Start();
					KeyboardSendingThread.Name = "Keyboard sending thread";
					
				}
				}
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare public void InitializeClient(NetworkManager networkMngr,bool DesktopSharing)",ex,"",false);
			}

		}
		private void SendPacket(MessageObject obj)
		{
			try
			{
				sendingList.Add(obj);
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare private void SendPacket(MessageObject obj)",ex,"",false);
			}

		}
		AppSharingMessageEx objectCopy ;
		long lngKey=0;
		private void SendPacket(ref AppSharingMessageEx obj)
		{
			try
			{



				//Junaid's perception 
				// this If block is not running 
				if((DataType)obj.nDataType == DataType.MouseActivity)			
				{
					if(hash.ContainsKey("mouse"))
						hash["mouse"]=obj;
					else
					{
						hash.Add("mouse",obj);
						keyArray.Add("mouse");
					}
					//Console.WriteLine("Mouse data sent");
				}
				//Junaid's perception 
				// this else block is not running 
				
				else if((DataType)obj.nDataType == DataType.PictureBlock)
				{
					if(hash.ContainsKey(obj.X + " " + obj.Y))
					{
						hash["" + obj.X + " " + obj.Y]=obj;
					}
					else
					{						
						if(isEntireDesktopSharing)
						{
							hash.Add("" + obj.X + " " + obj.Y,obj);
							keyArray.Add("" + obj.X + " " + obj.Y);
						
							objectCopy = GetAppSharingObject(obj);
							//objectCopy = obj;
							objectCopy.blockHeight = 0;
							objectCopy.blockSize= 0;
							objectCopy.blockWidth= 0;
							objectCopy.nDataType = 3;

							objectCopy.X = gX; 
							objectCopy.Y = gY; 

							sendingList.Add(objectCopy);
						}
						else
						{
							hash.Add("" + lngKey + " 0"  ,obj);
							keyArray.Add("" + lngKey + " 0"  );
							lngKey++; 
						}

					}
				}

				//Junaid's perception 
				// Only this else blocj is working 
				else
					sendingList.Add(obj);

				//Trace.WriteLine("sendingList.Count : " + sendingList.Count.ToString() );
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare 	private void SendPacket(ref AppSharingMessageEx obj)",ex,"",false);
			}
		}

		private AppSharingMessageEx GetAppSharingObject(AppSharingMessageEx obj)
		{
			AppSharingMessageEx obj2 = new AppSharingMessageEx();
			try
			{
				obj2 = obj;
				//return obj2;
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare 	private AppSharingMessageEx GetAppSharingObject(AppSharingMessageEx obj)",ex,"",false);
			}
			return obj2;
		
		}
		

		private void appServer_OnDataAvilable(ref byte[] buffer, DataType bDataType, ref int nX, ref int nY)
		{
			try
			{
//				Console.WriteLine("appServer_OnDataAvilable");

				if(bDataType == DataType.SizeInformation)
				{
					nWindowHeight = nY;
					nWindowWidth = nX;
				}
				// I am sending info
				// If a.bEnabled is true 
				//{ Application session is started }
				// else
				//{ Application session is ended }
				//
				if(bIsServer)
				{
					AppSharingMessageEx a = new AppSharingMessageEx();				
					a.pData = buffer;
					a.nDataType = (int)bDataType;
					a.X = nX;
					a.Y = nY;
					a.sessionId = nSessionID;
					a.windowHeight = nWindowHeight;
					a.windowWidth = nWindowWidth;
					a.SenderID = network.profile.ClientId;
					a.isDesktopshareing = isDesktopSharing;			
					a.ConferenceID = NetworkManager.thisInstance.profile.ConferenceID ;
					//	a.CloneBitmapInfo(ref appServer.bitmap);
					if(isDesktopSharing)
					{
						a.nReciepientID = ClientUI.getInstance().desktopSharedProfile.ClientId;
						SendPacket(ref a);
					}
					else	
					{
						//					Console.WriteLine("appServer_OnDataAvilable Packet Sent");
						SendPacket(ref a);
					}
					//Send the nmessage to network;
					if(!isDesktopSharing) 
					{
						//	Image m = appServer.GetServerFullBitmap();
						//						if((appServer.staticImage!= null))
						//						{
						//							counter++;
						//							Trace.WriteLine("  appServer_OnDataAvilable:::no of time its going to display :::: " + counter.ToString());
						//							//		//					whiteBoard.pictureBox1.Image = m;
						//							whiteBoard.RecieveAppSharingImage(appServer.staticImage); // for checking purpose to send latest msg	
						//							
						//							///////////////////////////////////Images on local   // check why chrash the software
						//							/*System.Threading.Thread.Sleep(100);
						//							whiteBoard.pictureBox1.BackgroundImage.Save(@"c:\back.jpg",System.Drawing.Imaging.ImageFormat.Jpeg);
						//							whiteBoard.pictureBox1.Image.Save(@"c:\image.jpg",System.Drawing.Imaging.ImageFormat.Jpeg);
						//							*/
						//							///////////////////////////////////Images on local
						//						}					
					}
					//////////////////////////////
					/*lastMSG = null;
					lastMSG = new AppSharingMessageEx ();
					///////////////////////////////////
					lastMSG = GetAppSharingObject(a);
					//lastMSG = a;
					*/
					if(!isDesktopSharing)
					{
						if(bDataType == DataType.DrawMouse)
						{
							//whiteBoard.DrawArrow(new Point(nX,nY)); 
						}
					}
					
				}
				else
				{
					AppSharingMessageEx a = new AppSharingMessageEx();
					a.pData = (byte[])buffer.Clone();
					a.nDataType = (int)bDataType;
					a.X = nX;
					a.Y = nY;
					a.sessionId = nSessionID;
					a.windowHeight = nWindowHeight;
					a.windowWidth = nWindowWidth;
					a.SenderID = network.profile.ClientId;
					a.isDesktopshareing = isDesktopSharing;				
					a.ConferenceID = NetworkManager.thisInstance.profile.ConferenceID;
					//send the message to network;
					//				network.Send(a);
					if(isDesktopSharing)
					{
						a.nReciepientID = ClientUI.getInstance().desktopSharedProfile.ClientId;
						SendPacket(ref a);
					}
					else					
						SendPacket(ref a);

				
				}
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare 	private void appServer_OnDataAvilable(ref byte[] buffer, DataType bDataType, ref int nX, ref int nY)",ex,"",false);
			}
		}		

		/// <summary>
		/// syn_sendLastAppImage () used to syncronize with new attendee which is new , actually it send last image
		/// </summary>

		public void syn_sendLastAppImage()
		{
			try
			{
				
				SendPacket(ref lastMSG); 
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare 	public void syn_sendLastAppImage()",ex,"",false);
			}
		}

		private void appServer_OnDataAvilableEx(ref byte[] buffer, DataType bDataType, ref int nX, ref int nY,ref int width, ref int height,ref int length)
		{
			try
			{
				Console.WriteLine("appServer_OnDataAvilableEx");
				if(bDataType == DataType.SizeInformation)
				{
					nWindowHeight = nY;
					nWindowWidth = nX;
				}
				if(bIsServer)
				{
					AppSharingMessageEx a = new AppSharingMessageEx();				
					a.pData = buffer;
					a.nDataType = (int)bDataType;
					a.X = nX;
					a.Y = nY;
					a.sessionId = nSessionID;
					a.windowHeight = nWindowHeight;
					a.windowWidth = nWindowWidth;
					a.blockWidth=width;
					a.blockHeight=height;
					a.blockSize=length;
					a.SenderID = network.profile.ClientId;
					a.ConferenceID = NetworkManager.thisInstance.profile.ConferenceID ;
					//	a.CloneBitmapInfo(ref appServer.bitmap);				
					a.isDesktopshareing = isDesktopSharing;				
					if(isDesktopSharing)
					{
						a.nReciepientID = ClientUI.getInstance().desktopSharedProfile.ClientId;
						SendPacket(ref a);
					}
					else					
					{
					
						//					Console.WriteLine("appServer_OnDataAvilableEx Packet Sent");
						SendPacket(ref a);				
					
						//	if(!isDesktopSharing) 
					{
						//	Image m = appServer.GetServerFullBitmap();
						if((appServer.staticImage!= null))
						{
						
							counter++;
							Trace.WriteLine(" appServer_OnDataAvilableEx ::: no of time its going to display :::: " + counter.ToString());
							//		//					whiteBoard.pictureBox1.Image = m;
							whiteBoard.RecieveAppSharingImage(appServer.staticImage);	// by kamran
							//
						}
					
					}

						
						//////////////////////////////////////// if minimized then do not update the message
						//if ( pSharedProcess.
						/*
											   IntPtr hwndInstance = pSharedProcess.Handle ;

											   // Then, get the WindowPlacement, so we can decide the best way to 
											   // activate the window correctly.
											   ManagedWindowPlacement placement = new ManagedWindowPlacement();
											   GetWindowPlacement(hwndInstance, placement);
						
											   Trace.WriteLine("command : " + placement.showCmd.ToString());
											   Trace.WriteLine("length : " + placement.length.ToString());
											   Trace.WriteLine("normal Postion.bottom : " + placement.normalPosition.bottom.ToString());
											   Trace.WriteLine("normal Postion.right : " + placement.normalPosition.right.ToString());

					   */
						//if (placement.showCmd != SW_SHOWMINIMIZED)
						if (! NetworkManager.getInstance().isNewAttendee)
						{	
							///////////////////////////////
							if(a.windowWidth > 170 && a.windowHeight > 40 )
							{
								lastMSG = null;
								lastMSG = new AppSharingMessageEx ();
								lastMSG = GetAppSharingObject(a);
							
								//mPreviousImage = (Image)mImage.Clone();
							}
							////////////////////////////////
							/*lastMSG = null;
							lastMSG = new AppSharingMessageEx ();
							lastMSG = GetAppSharingObject(a);
							*/
						}
						NetworkManager.getInstance().isNewAttendee = false;
						/////////////////////////////////////
						//	if(!isDesktopSharing)
					{
						if(bDataType == DataType.DrawMouse)
						{
							whiteBoard.DrawArrow(new Point(nX,nY));
						}
					}
					}
				}
				else
				{
					AppSharingMessageEx a = new AppSharingMessageEx();
					a.pData = (byte[])buffer.Clone();
					a.nDataType = (int)bDataType;
					a.X = nX;
					a.Y = nY;
					a.sessionId = nSessionID;
					a.windowHeight = nWindowHeight;
					a.windowWidth = nWindowWidth;
					a.windowWidth=width;
					a.windowWidth=height;
					a.blockSize=length;
					a.SenderID = network.profile.ClientId;
					a.isDesktopshareing = isDesktopSharing;	
					a.ConferenceID = NetworkManager.thisInstance.profile.ConferenceID ;
					//send the message to network;
					//				network.Send(a);
					if(isDesktopSharing)
					{
						a.nReciepientID = ClientUI.getInstance().desktopSharedProfile.ClientId;
						SendPacket(ref a);
					}
					else					
						SendPacket(ref a);

				
				}
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare 	private void appServer_OnDataAvilableEx(ref byte[] buffer, DataType bDataType, ref int nX, ref int nY,ref int width, ref int height,ref int length)",ex,"",false);
			}
		}	
		public void StopRefreshListTimer()
		{
			try
			{
				this.AutoRefresh.Stop();
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare 	public void StopRefreshListTimer()",ex,"",false);
			}
		}
		
		public void TerminateAttendeeSide()
		{
			try
			{			
				Thread _th = new Thread(new ThreadStart(TerminateAttendee));
				_th.Name = "Application Sharing Termination Thread";
				_th.Start();			
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare 	public void TerminateEx()",ex,"",false);
			}

		}
		public void TerminateEx()
		{
			try
			{
				
				Thread _th = new Thread(new ThreadStart(Terminate));
				_th.Name = "Application Sharing Termination Thread";
				_th.Start();
				
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare 	public void TerminateEx()",ex,"",false);
			}

		}

		public void QuickAppShareExit()
		{
			try
			{
				if(HostWindowHandle!=(System.IntPtr)0)
				{
					Win32.USER32.SendMessage(HostWindowHandle,USER_CLOSE_FORM,(System.IntPtr)0,(System.IntPtr)0);
					this.UnRegisterKeys();
					HostWindowHandle=(System.IntPtr)0;
				}
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare 	public void QuickAppShareExit()",ex,"",false);
			}

		}
		public void TerminateAttendee()
		{	
			
			try
			{	
				if(appServer!= null)
					appServer.Terminate();
			}
			catch(System.Threading.ThreadAbortException ex)
			{
				ex=ex;
			}
					
			catch(Exception exp)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare 	public void Terminate()",exp,"",false);
			}
		
			try
			{
				if(sendingThread!= null)
				{
					int i=0;

					while((sendingList.Count > 0) || (hash.Values.Count > 0) || (msgListCount > 0) )
					{
						Thread.Sleep(50);
						i+=50;
						if(i > 15000)
							break;

						continue;
					}

					Thread.Sleep(2000);// confirm to sent all messages
					sendingThread.Abort();
					sendingThread.Join(); // wait for complete termination of the thread
				}
			}
			catch(System.Threading.ThreadAbortException ex)
			{
				ex=ex;
			}
		
			catch(Exception exp )
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare 	public void Terminate()",exp,"",false);
			}

			try
			{
				if(whiteBoard != null)
				{
					this.whiteBoard.abortThreads();
				}
			}
			catch(System.Threading.ThreadAbortException ex)
			{
				ex=ex;
			}
		
			catch(Exception exp)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare 	public void Terminate()",exp,"",false);
			}



			try
			{
				if(KeyboardSendingThread!= null)
				{
					KeyboardSendingThread.Abort();
					KeyboardSendingThread.Join(); // wait for complete termination of the thread
				}


			}
			catch(System.Threading.ThreadAbortException ex)
			{
				ex=ex;
			}
		
			catch(Exception exp)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare 	public void Terminate()",exp,"",false);				
			}

			try
			{
				if(_mouseThread!= null)
				{										
					this.m_bIsActive=false;
					_mouseThread.Abort();
					_mouseThread.Join();// wait for complete termination of the thread
				}
			}
			catch(System.Threading.ThreadAbortException ex)
			{
				ex=ex;
			}
		
			catch(Exception exp)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare 	public void Terminate()",exp,"",false);		
			}
			
			try
			{
				if(!isDesktopSharing) 
				{
					//ClientUI.getInstance().myNiceMenu.SearchNiceMenuItem("Entire Desktop").Enabled = true;
					ClientUI.getInstance().myNiceMenu.SearchNiceMenuItem("Application").Enabled = true;

					Thread.Sleep(3000); // TO REMOVE desktop sharing , it confirms that all data messages have  come
					
					//					AppSharingMessageEx aEx = new AppSharingMessageEx();
					//					aEx.sessionId = nSessionID;
					//					aEx.SenderID = network.profile.ClientId;
					//					aEx.bEnabled = false;
					//					aEx.ConferenceID = NetworkManager.thisInstance.profile.ConferenceID ;
					//					network.SendLoadPacket(aEx);	
					stopMouseHook();

				}
			}
			catch(System.Threading.ThreadAbortException ex)
			{
				ex=ex;
			}
		
			catch(Exception exp)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare 	public void Terminate()",exp,"",false);				
			}
			
			
		}
		public void Terminate()
		{	
			
			try
			{	
				if(appServer!= null)
					appServer.Terminate();
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare 	public void Terminate()",ex,"",false);
			}
			//			try
			//			{
			//				
			//			}
			//			catch(Exception ex)
			//			{
			//			}
			try
			{
				if(sendingThread!= null)
				{
					int i=0;

					while((sendingList.Count > 0) || (hash.Values.Count > 0) || (msgListCount > 0) )
					{
						Thread.Sleep(50);
						i+=50;
						if(i > 15000)
							break;

						continue;
					}

					Thread.Sleep(2000);// confirm to sent all messages
					sendingThread.Abort();
					sendingThread.Join(); // wait for complete termination of the thread
				}
			}
			catch(Exception ex )
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare 	public void Terminate()",ex,"",false);
			}

			try
			{
				if(whiteBoard != null)
				{
					this.whiteBoard.abortThreads();
				}
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare 	public void Terminate()",ex,"",false);
			}



			try
			{
				if(KeyboardSendingThread!= null)
				{
					KeyboardSendingThread.Abort();
					KeyboardSendingThread.Join(); // wait for complete termination of the thread
				}


			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare 	public void Terminate()",ex,"",false);				
			}

			try
			{
				if(_mouseThread!= null)
				{										
					this.m_bIsActive=false;
					_mouseThread.Abort();
					_mouseThread.Join();// wait for complete termination of the thread
				}
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare 	public void Terminate()",ex,"",false);		
			}
			
			try
			{
				if(!isDesktopSharing) 
				{
					

					Thread.Sleep(3000); // TO REMOVE desktop sharing , it confirms that all data messages have  come
					
					AppSharingMessageEx aEx = new AppSharingMessageEx();
					aEx.sessionId = nSessionID;
					aEx.SenderID = network.profile.ClientId;
					aEx.bEnabled = false;
					aEx.ConferenceID = NetworkManager.thisInstance.profile.ConferenceID ;
					network.SendLoadPacket(aEx);	
					stopMouseHook();
					try
					{
						ClientUI.getInstance().myNiceMenu.SearchNiceMenuItem("Entire Desktop").Enabled = true;
						ClientUI.getInstance().myNiceMenu.SearchNiceMenuItem("Application").Enabled = true;
					}
					catch(Exception ex)
					{
						ex=ex;
					}

				}
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare 	public void Terminate()",ex,"",false);				
			}
			
			
		}
		
		public void AddProcessToList2(int handle, string winTitle)
		{			
			try
			{
				if(CurrentProcessID!=handle)
				{
					//Trace.WriteLine("Current Process ID "+CurrentProcessID.ToString());
					this.strProcessHtm+=this.AddProccessHtm(handle.ToString(),winTitle.Replace(" ","&nbsp;"));
				}
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare 	public void AddProcessToList2(int handle, string winTitle)",ex,"",false);								
			}				
		}
		

		public void AddProcessToList(System.Diagnostics.Process pProcess,System.Diagnostics.Process pCurrentProcess)
		{
			try
			{
				if(pProcess.MainWindowTitle =="")
				{
					this.strProcessHtm+=this.AddProccessHtm(pProcess.Id.ToString(),pProcess.MainWindowTitle.Replace(" ","&nbsp;"));				
					return;
				}
				else
				{
					if(pProcess.ProcessName == pCurrentProcess.ProcessName )
					{
						//lv.Tag = -1;
						//this.strProcessHtm+=this.AddProccessHtm("-1",pProcess.MainWindowTitle.Replace(" ","&nbsp;"));
					}
					else
					{
						this.strProcessHtm+=this.AddProccessHtm(pProcess.Id.ToString(),pProcess.MainWindowTitle.Replace(" ","&nbsp;"));
					}
				}
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare 	public void AddProcessToList(System.Diagnostics.Process pProcess,System.Diagnostics.Process pCurrentProcess)",ex,"",false);								
			}

		}

		public void SelectWindow()
		{	
			
			try
			{
				_Tree.Clear();
				if(whiteBoard != null)
					whiteBoard.Visible = false;
				lblINfo.Visible = true;
				pictureBox1.Visible = false;
				this.btnShare.Visible=false;
				this.btnLog.Visible=false;
				if(!this.isSetupBrowser)
					this.SetUpWebBrowser();
				strProcessHtm="";
				try
				{
					# region For all Process List
					_ToolbarWindowHandle = GetToolbarWindowHandle();
					if ( _ToolbarWindowHandle == IntPtr.Zero ) 
						_Glomming = ( Glomming.Int != 0 );
					_ToolbarWindowHandle = GetToolbarWindowHandle();
					if ( _ToolbarWindowHandle == IntPtr.Zero ) 
					{
						WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare 	public void SelectWindow() Process List",new Exception("ProcessListReturn"),"",false);	
						return;
					}

					_Glomming = ( Glomming.Int != 0 );

					UInt32 counti = Win32.USER32.SendMessage( _ToolbarWindowHandle, Win32.USER32.TB.BUTTONCOUNT, 0, 0 );
					try
					{
						for ( int i = 0 ; i < counti ; i++ )
						{
							Win32.USER32.TBBUTTON tbButton = new Win32.USER32.TBBUTTON();
							string text = String.Empty;
							IntPtr ipWindowHandle = IntPtr.Zero;

							bool b = GetTBButton( _ToolbarWindowHandle, i, ref tbButton, ref text, ref ipWindowHandle );

							if ( b ) 
							{
								AddData( tbButton, text, ipWindowHandle );
								if((int) ipWindowHandle	!= 0)
								{
									if(System.Diagnostics.Process.GetCurrentProcess().MainWindowHandle.ToInt32() != (int) ipWindowHandle)
									{
										//StringBuilder formDetails = new StringBuilder(256);
								
										//string editText="";
						
										//editText = window.ButtonText;
					
										if(text!="")
										{
											if( (!text.ToLower().Equals("start menu")) || (!text.ToLower().Equals("power meter")) || (!text.ToLower().Equals("program manager")) )
											{											
												AddProcessToList2( (int)ipWindowHandle, text);
											}
										}						
									}
								}

								//WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare 	public void SelectWindow() error in fir for loop",new Exception(text+ "    " +ipWindowHandle.ToString()),"",false);
							}

						}
					}
					catch(Exception ex)
					{
						WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare 	public void SelectWindow() error in fir for loop",ex,"",false);
					}
					
					//					try
					//					{
					//						int i=0;
					//						foreach ( INode nodeWindow in _Tree.Nodes )
					//						{							
					//							i++;							
					//							try
					//							{
					//								if((DataWindow)nodeWindow.Data!=null)	
					//								{
					//									DataWindow window = (DataWindow)nodeWindow.Data;
					//								}else
					//									WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare 	public void SelectWindow() counter " + i.ToString(),new Exception("its null"),"",false);
					//							}
					//							catch(Exception ex)
					//							{
					//								WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare 	public void SelectWindow() cost bug is here  DataWindow window = ( DataWindow ) nodeWindow.Data; counter " + i.ToString(),ex,"",false);
					//							}
					//
					////							if(System.Diagnostics.Process.GetCurrentProcess().MainWindowHandle.ToInt32() != (int) window.ProcessId )
					////							{
					////								StringBuilder formDetails = new StringBuilder(256);
					////							
					////								string editText="";
					////					
					////								editText = window.ButtonText;
					////				
					////								if(editText!="")
					////								{
					////									if( (!editText.ToLower().Equals("start menu")) || (!editText.ToLower().Equals("power meter")) || (!editText.ToLower().Equals("program manager")) )
					////									{
					////										AddProcessToList2( (int)window.WindowHandle, editText);
					////									}
					////								}						
					////							}
					//
					//						}
					//					}
					//					catch(Exception ex)
					//					{
					//						WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare 	public void SelectWindow() error in seconds for loop",ex,"",false);
					//					}
				}
				catch(Exception ex)
				{
					WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare 	public void SelectWindow() error in process list",ex,"",false);
				}
				# endregion For all Process List
				
				//				if(DocInitialized==false)
				//				{
				//					this.axWebBrowser1.Navigate("about:blank", ref o, ref o, ref o, ref o);
				//            
				//					ICustomDoc cDoc = (ICustomDoc)this.axWebBrowser1.Document;
				//					cDoc.SetUIHandler((IDocHostUIHandler)this);
				//					DocInitialized=true;
				//				}

				this.WriteHtmFile();				
				object o='0';
				this.axWebBrowser1.Navigate(Application.StartupPath + "\\Process.htm",ref o,ref o,ref o,ref o);
				strProcessHtm="";
				btnShare.Visible = false;			
				this.axWebBrowser1.Visible=true;
				this.axWebBrowser1.Invalidate();
				this.axWebBrowser1.BringToFront();
				o=null;
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare 	public void SelectWindow()",ex,"",false);
				//ex=ex;
			}
		}
		#region Methods for Process list
		private IntPtr GetToolbarWindowHandle()
		{
			try
			{
				IntPtr hDesktop = Win32.USER32.GetDesktopWindow();

				IntPtr hTray =(System.IntPtr) Win32.USER32.FindWindowEx( hDesktop, IntPtr.Zero, "Shell_TrayWnd", null );

				IntPtr hReBar =(System.IntPtr) Win32.USER32.FindWindowEx( hTray, IntPtr.Zero, "ReBarWindow32", null );

				IntPtr hTask = (System.IntPtr)Win32.USER32.FindWindowEx( hReBar, IntPtr.Zero, "MSTaskSwWClass", null );

				IntPtr hToolbar = (System.IntPtr)Win32.USER32.FindWindowEx( hTask, IntPtr.Zero, "ToolbarWindow32", null );

				//			hToolbar = User32.FindWindowEx( hReBar, IntPtr.Zero, "ToolbarWindow32", "Quick Launch" );

				//			hToolbar = toolBar1.Handle;

				if ( hToolbar == IntPtr.Zero )
					MessageBox.Show(
						"Couldn't find Taskbar",
						"Error",
						MessageBoxButtons.OK,
						MessageBoxIcon.Error );
				return hToolbar;
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare private IntPtr GetToolbarWindowHandle()",ex,"",false);
				return IntPtr.Zero;
			}


		}

		private unsafe bool GetTBButton( IntPtr hToolbar, int i, ref Win32.USER32.TBBUTTON tbButton, ref string text, ref IntPtr ipWindowHandle )
		{
			try
			{
			

				// One page
				const int BUFFER_SIZE = 0x1000;

				byte[] localBuffer = new byte[ BUFFER_SIZE ];

				UInt32 processId = 0;
				UInt32 threadId = Win32.USER32.GetWindowThreadProcessId( hToolbar, out processId );

				IntPtr hProcess = Win32.KERNEL32.OpenProcess( Win32.ProcessRights.ALL_ACCESS, false, processId );
				if ( hProcess == IntPtr.Zero )
				{
					//Debug.Assert( false );
					return false; 
				}
 
				IntPtr ipRemoteBuffer = Win32.KERNEL32.VirtualAllocEx(
					hProcess,
					IntPtr.Zero,
					new UIntPtr( BUFFER_SIZE ),
					Win32.MemAllocationType.COMMIT,
					Win32.MemoryProtection.PAGE_READWRITE );

				if ( ipRemoteBuffer == IntPtr.Zero ) 
				{ 
					//Debug.Assert( false ); 
					return false; 
				}

				// TBButton
				fixed ( Win32.USER32.TBBUTTON* pTBButton = & tbButton )
				{
					IntPtr ipTBButton = new IntPtr( pTBButton );

					int b = ( int ) Win32.USER32.SendMessage( hToolbar, Win32.USER32.TB.GETBUTTON, ( IntPtr ) i, ipRemoteBuffer );
					if ( b == 0 ) 
					{ 
						//Debug.Assert( false ); 
						return false; 
					}

					// this is fixed
					Int32 dwBytesRead = 0;
					IntPtr ipBytesRead = new IntPtr( & dwBytesRead );

					bool b2 = Win32.KERNEL32.ReadProcessMemory(
						hProcess,
						ipRemoteBuffer,
						ipTBButton,
						new UIntPtr( ( uint ) sizeof( Win32.USER32.TBBUTTON ) ),
						ipBytesRead );

					if ( ! b2 ) 
					{ 
						//Debug.Assert( false ); 
						return false;
					}
				}

				// button text
				fixed ( byte* pLocalBuffer = localBuffer )
				{
					IntPtr ipLocalBuffer = new IntPtr( pLocalBuffer );

					int chars = ( int ) Win32.USER32.SendMessage( hToolbar, Win32.USER32.TB.GETBUTTONTEXTW, ( IntPtr ) tbButton.idCommand, ipRemoteBuffer );
					if ( chars == -1 ) 
					{
						//Debug.Assert( false );
						return false; 
					}

					// this is fixed
					Int32 dwBytesRead = 0;
					IntPtr ipBytesRead = new IntPtr( & dwBytesRead );

					bool b4 = Win32.KERNEL32.ReadProcessMemory(
						hProcess,
						ipRemoteBuffer,
						ipLocalBuffer,
						new UIntPtr( BUFFER_SIZE ),
						ipBytesRead );

					if ( ! b4 ) 
					{
						//Debug.Assert( false ); 
						return false;
					}

					text = Marshal.PtrToStringUni( ipLocalBuffer, chars );

					if ( text == " " ) text = String.Empty;
				}

				// window handle
				fixed ( byte* pLocalBuffer = localBuffer )
				{
					IntPtr ipLocalBuffer = new IntPtr( pLocalBuffer );

					// this is in the remote virtual memory space
					IntPtr ipRemoteData = new IntPtr( tbButton.dwData );

					// this is fixed
					Int32 dwBytesRead = 0;
					IntPtr ipBytesRead = new IntPtr( & dwBytesRead );

					bool b4 = Win32.KERNEL32.ReadProcessMemory(
						hProcess,
						ipRemoteData,
						ipLocalBuffer,
						new UIntPtr( 4 ),
						ipBytesRead );

					if ( ! b4 ) 
					{ 
						//Debug.Assert( false ); 
						return false; 
					}

					if ( dwBytesRead != 4 ) 
					{ 
						//Debug.Assert( false ); 
						return false; 
					}

					Int32 iWindowHandle = BitConverter.ToInt32( localBuffer, 0 );
					if ( iWindowHandle == -1 ) 
					{
						//	Debug.Assert( false );
					}//return false; }

					ipWindowHandle = new IntPtr( iWindowHandle );
				}

				Win32.KERNEL32.VirtualFreeEx(
					hProcess,
					ipRemoteBuffer,
					UIntPtr.Zero,
					Win32.MemAllocationType.RELEASE );

				Win32.KERNEL32.CloseHandle( hProcess );
				return true;
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare private unsafe bool GetTBButton( IntPtr hToolbar, int i, ref TBBUTTON tbButton, ref string text, ref IntPtr ipWindowHandle )",ex,"",false);
				return false;
			}			
		}
		private void AddData( Win32.USER32.TBBUTTON tbButton, string text, IntPtr ipWindowHandle )
		{
			try
			{


				string state = ( ( tbButton.fsState & Win32.USER32.TBSTATE.HIDDEN ) == 0 ) ? "Shown" : "Hidden";
				string handle = "0x" + ( ( UInt32 ) ipWindowHandle ).ToString( "X8", CultureInfo.CurrentCulture );

				if ( _Glomming )
				{
					if ( ipWindowHandle == IntPtr.Zero ) // Process
					{
						DataProcess o = new DataProcess( tbButton, text, ipWindowHandle );
						o.Node = _Tree.AddChild( o );
					}
					else // Window
					{
						DataWindow o = new DataWindow( tbButton, text, ipWindowHandle );
						o.Node = _Tree.Root.Child.Last.AddChild( o );
					}
				}
				else // not glomming
				{
					if ( ipWindowHandle != IntPtr.Zero )
					{
						DataWindow o = new DataWindow( tbButton, text, ipWindowHandle );
						o.Node = _Tree.AddChild( o );
					}
				}
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare private void AddData( TBBUTTON tbButton, string text, IntPtr ipWindowHandle )",ex,"",false);
			}

		}

		#endregion Methods for Process list

		
		private bool m_bIsActive = true;
		private Point _mouseLastPositoin = new Point(0,0);
		private Point _mouseThisPosition = new Point(0,0);
		private Point _temp = new Point(0,0);
		private Rectangle _dummyRect = new Rectangle(0,0,10,10);
		public delegate void RefreshEx();
		public RefreshEx RefreshDoIt;
		public void RefreshWindow()
		{
			try
			{
				Trace.WriteLine("RefreshWindow()");
				whiteBoard.DrawArrow(new Point(_mouseLastPositoin.X,_mouseLastPositoin.Y));
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare public void RefreshWindow()",ex,"",false);
			}
			//pictureBox1.Invalidate(_dummyRect);
		}
		public void MouseThreadFunction()
		{
			try
			{
				while(m_bIsActive)
				{
					//				try
				{
					Thread.Sleep(50);
					if(IsDisposed)
					{
						try
						{
						
							Thread.Sleep(500);
						}
						catch(Exception ex)
						{
							WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare public void MouseThreadFunction()",ex,"",false);
						}


					}
					while(true)
					{
						if((Math.Abs(_mouseLastPositoin.X -_mouseThisPosition.X) < 11) && ((Math.Abs(_mouseLastPositoin.Y -_mouseThisPosition.Y) < 11)))
							break;

						if(m_bIsActive==false)
						{
							//							Console.WriteLine("IsDispoed = true");
							return;
							//							break;
							//							Thread.Sleep(1000);
							
						}
						if(Math.Abs(_mouseLastPositoin.X -_mouseThisPosition.X) > 100)
						{
							if(_mouseLastPositoin.X < _mouseThisPosition.X)
								_mouseLastPositoin.X+=50;
							else if(_mouseLastPositoin.X > _mouseThisPosition.X)
								_mouseLastPositoin.X-=50;  
						}
						if(Math.Abs(_mouseLastPositoin.Y -_mouseThisPosition.Y) >100)
						{
							if(_mouseLastPositoin.Y < _mouseThisPosition.Y)
								_mouseLastPositoin.Y+=50;
							else if(_mouseLastPositoin.Y>  _mouseThisPosition.Y)
								_mouseLastPositoin.Y-=50;                                
						}

						if(Math.Abs(_mouseLastPositoin.X -_mouseThisPosition.X) > 11)
						{
							if(_mouseLastPositoin.X < _mouseThisPosition.X)
								_mouseLastPositoin.X+=10;
							else if(_mouseLastPositoin.X > _mouseThisPosition.X)
								_mouseLastPositoin.X-=10;                                
						}
						if(Math.Abs(_mouseLastPositoin.Y -_mouseThisPosition.Y) >11)
						{
							if(_mouseLastPositoin.Y < _mouseThisPosition.Y)
								_mouseLastPositoin.Y+=10;
							else if(_mouseLastPositoin.Y>  _mouseThisPosition.Y)
								_mouseLastPositoin.Y-=10;                                
						}					                    
						Thread.Sleep(250);
						if(whiteBoard.InvokeRequired)
						{
							Trace.WriteLine("Draw Arrow is here");
							Invoke(RefreshDoIt,new object[] { });
						}					
					}				
				}
					//				catch(Exception ee)
					//				{
					//					Console.WriteLine(ee.ToString());
					//
					//				}
					//				
					/*
					if(_mouseLastPositoin != _mouseThisPosition)
					{
						while(true)
						{
							if(_mouseLastPositoin.X < _mouseThisPosition.X)
								_mouseLastPositoin.X+=5;
							else if(_mouseLastPositoin.X > _mouseLastPositoin.X)
								_mouseLastPositoin.X-=5;                                
							
							if(_mouseLastPositoin.Y < _mouseThisPosition.Y)
								_mouseLastPositoin.Y+=5;
							else if(_mouseLastPositoin.Y>  _mouseLastPositoin.Y)
								_mouseLastPositoin.Y-=5;                                
							pictureBox1.Refresh();
	//						Refresh();
							if(_mouseLastPositoin == _mouseThisPosition)
								break;
						}
					}
					*/
				}
			}
			catch(System.Threading.ThreadAbortException ex)
			{
				ex=ex;
			}
					
			catch(Exception exp)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare public void MouseThreadFunction()",exp,"",false);
			}
		}

		public Image mPreviousImage;
		public void RecieveMessageFromNetwork(ref AppSharingMessageEx msg)
		{
			try
			{		
				if((DataType)msg.nDataType == DataType.Scrolling)
				{
					whiteBoard.SetHPosition(msg.X);
					whiteBoard.SetVPosition(msg.Y);
				}

				if(bIsServer)
				{
					appServer.RecieveServerData(msg.pData,(DataType)msg.nDataType,msg.X,msg.Y);
				}
				else
				{
					if((DataType)msg.nDataType == DataType.DrawMouse)
					{
				
						if((!isDesktopSharing))
						{
							if(_mouseLastPositoin.X != msg.X || _mouseLastPositoin.Y != msg.Y)
							{
								_mouseThisPosition.X = msg.X;
								_mouseThisPosition.Y = msg.Y;
							}                         
						}
					}
					else
					{
						Image mImage = appServer.RecieveDataEx(msg.pData,ref msg._bmpInfo, (DataType)msg.nDataType,msg.X,msg.Y,msg.blockWidth,msg.blockHeight,msg.blockSize);					
						if((!isDesktopSharing) && (mImage!= null))
						{
							whiteBoard.BringToFront();
							
							//Trace.WriteLine("image is received ");
							///////////////////////////////////////////////////////////
							if(mImage.Width < 170 && mImage.Height < 40 )
							{
								//Trace.WriteLine("previous image is received ");
								mImage = (Image)mPreviousImage.Clone() ;
								//return;
							}
							else
							{
								appServer.isWaitingPic = false;
								//Trace.WriteLine("new image is received ");
								mPreviousImage = (Image)mImage.Clone();
								
							}
							///////////////////////////////////////////////////////////

							whiteBoard.RecieveAppSharingImage(mImage);					
							whiteBoard.BringToFront();//F1
							//	Console.WriteLine("Image Message Recieved, Image Created Succesfully, and Image Passed to WhiteBoard. No Errors Yet");
						}
						else if((!isDesktopSharing) && (mImage== null))
						{
							//Trace.WriteLine("previous image is displaying for app sharing");
							whiteBoard.BringToFront();
							whiteBoard.RecieveAppSharingImage(mPreviousImage);					
							whiteBoard.BringToFront();//F1
						}
						else if(mImage != null)
						{
							//Trace.WriteLine("image is received ");
							Console.WriteLine("before msg Image Set" + DateTime.Now.ToString());
							pictureBox1.Image  = mImage;
							Console.WriteLine("after msg Image Set" + DateTime.Now.ToString());
						}
						else
						{  // check for desktop sharing 
							//Trace.WriteLine("previous image is displaying ");
							pictureBox1.Image  = mPreviousImage;
						}

					}
				
				}			
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare public void RecieveMessageFromNetwork(ref AppSharingMessageEx msg)",ex,"",false);
			}
		} 

		public void AttendeeJoined()
		{
			try
			{
				if(HostWindowHandle!=(System.IntPtr)0)
				{
					this.appServer.SendAll();
				}
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare public void AttendeeJoined()",ex,"",false);
			}

		}
		
		public void KeyboardThreadFunction()
		{
			try
			{
				while(true)
				{
					while(keyboardEventsQueue.Count>0)
					{
						Console.WriteLine("KeyboardThreadFunction");
						//Trace.WriteLine("keyboardEventsQueue.Count : "+ keyboardEventsQueue.Count.ToString());
						//KeyboardEvent key = (KeyboardEvent)keyboardEventsQueue.Dequeue();
						KeyboardEvent key = (KeyboardEvent)keyboardEventsQueue[0];
						keyboardEventsQueue.RemoveAt(0);
						int keyValue = key.keyValue;
						if(key.bKeyDown == true)
						{
							appServer.SendKeyStroke(Win32.USER32.WM_KEYDOWN,keyValue);
						}
						else
						{
							appServer.SendKeyStroke(Win32.USER32.WM_KEYUP,keyValue);
						}
						//	Thread.Sleep(20);
					}

					Thread.Sleep(20);
				}
			}
			catch(System.Threading.ThreadAbortException ex)
			{
				ex=ex;
			}
					
			catch(Exception exp)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare public void KeyboardThreadFunction()",exp,"",false);
			}
		}
		

		public void MyKeyDown(object sender, KeyEventArgs e)
		{
			try
			{
				pictureBox1_OnKeyDownEvent(e);
				//LogWrite("KeyDown 	- " + e.KeyData.ToString());
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare public void MyKeyDown(object sender, KeyEventArgs e)",ex,"",false);
			}
		}
		
		public void MyKeyPress(object sender, KeyPressEventArgs e)
		{
			try
			{
				pictureBox1_OnKeyPressEvent(e);
				//LogWrite("KeyPress 	- " + e.KeyChar);
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare public void MyKeyPress(object sender, KeyPressEventArgs e)",ex,"",false);
			}
			
			
		}
		
		public void MyKeyUp(object sender, KeyEventArgs e)
		{
			try
			{
				pictureBox1_OnKeyUpEvent(e);
				//LogWrite("KeyUp 		- " + e.KeyData.ToString());
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare public void MyKeyUp(object sender, KeyEventArgs e)",ex,"",false);
			}

			
		}
		private void pictureBox1_OnKeyUpEvent(KeyEventArgs e)
		{
			try
			{
				//if(bSendActivity)
				//	appServer.SendKeyStroke(AppSharing.WM_KEYUP,(int)e.KeyCode);
				//int val = (int)e.KeyCode;
				if(bSendActivity)
				{
					//appServer.SendKeyStroke(AppSharing.WM_KEYUP,(int)e.KeyCode);
					KeyboardEvent k = new KeyboardEvent();
					k.bKeyDown = false;
					k.keyValue = (int)e.KeyCode;
					//keyboardEventsQueue.Enqueue( (object)k);
					keyboardEventsQueue.Add((object)k);
					//sw.Write(e.KeyCode); 
					//sw.Close();
				}
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare private void pictureBox1_OnKeyUpEvent(KeyEventArgs e)",ex,"",false);
			}
		}

		private void pictureBox1_OnKeyDownEvent(KeyEventArgs e)
		{
			try
			{
				// the queue shud always have one key, we dont need a queue actually
				// a single item cud've done fine
			
				//if(bSendActivity)
				//	appServer.SendKeyStroke(AppSharing.WM_KEYDOWN,(int) e.KeyCode);
				if(bSendActivity)
				{
					//appServer.SendKeyStroke(AppSharing.WM_KEYDOWN,(int)e.KeyCode);
					KeyboardEvent k = new KeyboardEvent();
					k.bKeyDown = true;
					k.keyValue = (int)e.KeyCode;
					//keyboardEventsQueue.Enqueue( (object)k);
					keyboardEventsQueue.Add((object)k);
					//sw.Write(e.KeyCode); 
					//sw.Close();
				}	
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare private void pictureBox1_OnKeyDownEvent(KeyEventArgs e)",ex,"",false);
			}
		}

		private void pictureBox1_OnKeyPressEvent(KeyPressEventArgs e)
		{	
			//////////			if(bSendActivity)
			//////////			{
			//////////				int val = (int)e.KeyChar;
			//////////				appServer.SendKeyStroke(AppSharing.WM_CHAR,e.KeyChar);						
			//////////			}
			//if(bSendActivity)
			//	appServer.SendKeyStroke(AppSharing.WM_KEYUP,(int)e.KeyCode);
		}


		/*

		public static void maxApplication()
		{
			try
			{
				Thread.Sleep(7000);

				//if(ClientUI.getInstance().myAppShareStarted)								
				//	ClientUI.getInstance()._appShareControl.AttendeeJoined();								
				
				
				Win32.USER32.ShowWindow(new IntPtr(pSharedHandle), Win32.USER32.SW_SHOWNA  ); // it is necessory to maximized widow
				
				Thread.Sleep(500);
				
				Win32.USER32.ShowWindow(new IntPtr(pSharedHandle), Win32.USER32.SW_SHOWMAXIMIZED); // it is necessory to maximized widow
				
				//AppSharing.FlashWindow2(pSharedProcess.Handle);			

				
//				StateUpdateMessage msg = new StateUpdateMessage();
//				msg.updateType = UpdateTypeCode.UpdateApplicationSharingCompund;
//				//msg.dataArray = (ArrayList)lastMSG.Clone();
//				msg.SenderID = NetworkManager.thisInstance.profile.ClientId;
//				//				if(isDesktopSharing)
//				//					NetworkManager.thisInstance.SendAppShareLoadPacket(ref msg,nSessionID);
//				//				else
//				//Application.DoEvents();
//				//Thread.Sleep(5000);
//				NetworkManager.thisInstance.SendAppShareLoadPacket(ref msg,-1); 
//				
				//SendMessage(pSharedProcess.Handle, WM_ACTIVATE ,new IntPtr(),new IntPtr());
				//ShowWindow(pSharedProcess.MainWindowHandle, SW_SHOWMAXIMIZED  ); // it is necessory to maximized widow
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare public static void maxApplication()",ex,"",false);
			}
		}
		*/






		int oldWinStyle;
		private void setMinimizeDisable(IntPtr hwd)
		{
			try
			{
				//System.Diagnostics.Process pProcess = System.Diagnostics.Process.GetProcessById(0x000048BC);
				//System.Diagnostics.Process pProcess = System.Diagnostics.Process.GetProcessById(0x000048BC);
				
				int style = Win32.USER32.GetWindowLong(hwd , Win32.USER32.GWL_STYLE);
				oldWinStyle = style ;
				if ( (style & Win32.USER32.WS_MINIMIZEBOX) == Win32.USER32.WS_MINIMIZEBOX)
				{
					style   &= ~Win32.USER32.WS_MINIMIZEBOX;
				}
				// Set new style values
				Win32.USER32.SetWindowLong(hwd, Win32.USER32.GWL_STYLE, style);
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare private void setMinimizeDisable(IntPtr hwd)",ex,"",false);
			}
		}

		private void setMinimizeEnable( object source,System.Timers.ElapsedEventArgs eArgs)
		{
			try
			{
				Win32.USER32.SetWindowLong(new IntPtr(pSharedHandle), Win32.USER32.GWL_STYLE, oldWinStyle );				
				//ShowWindow(new IntPtr(pSharedHandle), SW_RESTORE);				
				winStyleTimer.Stop();
				winStyleTimer.Dispose();
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare private void setMinimizeEnable( object source,System.Timers.ElapsedEventArgs eArgs)",ex,"",false);
			}
		}




		public System.Timers.Timer  winStyleTimer;
		static System.Diagnostics.Process pSharedProcess ;
		static int pSharedHandle;


		/// <summary>
		/// Launshes the given process 
		/// given means, the handle of which is provided to it.
		/// </summary>
		/// <param name="winHandle"></param>
		public void LaunchProcess(int winHandle)
		{
			try
			{
			
				if(winHandle != -1)
				{
					//System.Diagnostics.Process pProcess = System.Diagnostics.Process.GetProcessById(nProcessId);
				
					//pSharedProcess = System.Diagnostics.Process.GetProcessById(nProcessId);
					pSharedHandle = winHandle;
					bIsAppSharingStarted=true;
					try
					{
						if(!RegisterKeys())
						{
							UnRegisterKeys();
							RegisterKeys();
							//System.Windows.Forms.MessageBox.Show("Hot Keys not Registered Succcessfully");
						}
					}
					catch(Exception )
					{
				
					}
					if(winHandle!= 0)			
					{
					
						DrawingClearMessage msg = new DrawingClearMessage(0);
						msg.m_ControlType = ControlType.ApplicationSharing;
						msg.SenderID = NetworkManager.thisInstance.profile.ClientId;
						msg.senderProfile = NetworkManager.thisInstance.profile;					
					

						// The blue parent window , whos child is App share window.
						//Commented By zaeem
						frmHostWindow=new Client.AppSharing.SharedWindowHostFrm();
						frmHostWindow.appWin=(System.IntPtr)winHandle;					
						frmHostWindow.AppShareWindow=this.Handle;			
						
						
						//Define these delegate so that we can use them while closing app sharing
						//By clicking on the close App share button 
//
//						//Commented By zaeem

						frmHostWindow.appClose+= new WebMeeting.CloseAppShare(this.ApplicationSharing_appShareClose); 
						frmHostWindow.deltakeback+=new WebMeeting.TakeAnnotationRightsBack(this.SendTakenAnnotationRightsBackMessage);
//						frmHostWindow.Show();
						HostWindowHandle=frmHostWindow.Handle;
						//SetParent((System.IntPtr)winHandle,frmHostWindow.Handle);											
						//MoveWindow((System.IntPtr)winHandle,0,0,frmHostWindow.Width,frmHostWindow.Height,true);
					
					
 
						NetworkManager.thisInstance.SendLoadPacket(msg);
						this.whiteBoard.Clear(true,0);						
						sendingThread = new Thread(new ThreadStart(SendingFunction));
						sendingThread.Name = "Application Sharing Sending Thread";
						sendingThread.Start();					
						try
						{
							if(appServer.lastFrameImage!=null)
							{
								appServer.lastFrameImage.Dispose();
								appServer.lastFrameImage=null;
							}
						}
						catch(Exception ex)
						{
							WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare public void LaunchProcess(int winHandle) doing lastframimage null at the launch process",ex,"",false);
						}
						appServer.isDesktopWindowInApp = false;
						//pProcess.PriorityBoostEnabled = true; // by kamran
						
						/*
						 * SW_SHOWNORMAL
						 *	Activates and displays a window. If the window is minimized or maximized, the system restores it to
						 *	its original size and position. 
						 *	An application should specify this flag when displaying the window for the first time
						 */
						Win32.USER32.ShowWindow(new IntPtr(winHandle) ,Win32.USER32.SW_SHOWNORMAL); // it is necessory to maximized widow

						appServer.SetCaptureWindowAndStartCapturing(new IntPtr(winHandle)); // we have to open one time more											

						setMinimizeDisable(new IntPtr(winHandle));

						winStyleTimer = new System.Timers.Timer(); 
						winStyleTimer.Interval = 5000;
						winStyleTimer.Elapsed += new System.Timers.ElapsedEventHandler(setMinimizeEnable);
						winStyleTimer.Start();					

					}
					if(isDesktopSharing)
						pictureBox1.Visible = true;
					else			
					{
						this.whiteBoard.InitializeToSize(400,400);
						this.whiteBoard.pictureBox1.isPictureAssign=false;						
						this.whiteBoard.btn_whtLogg.Visible=false;
						this.whiteBoard.RunSendingThread();
						whiteBoard.IsAppSharingWindow = true;
						whiteBoard.Visible = true; // to display annotation kamran
						whiteBoard.BringToFront();
					}
					//listView1.Visible = false;
					lblINfo.Visible = false;
				
					btnShare.Visible = true;
					btnShare.BringToFront();
				
					btnLog.Visible = true;
					btnLog.BringToFront();
				
				}
				else
				{
					System.Diagnostics.Process pP = System.Diagnostics.Process.GetCurrentProcess();
					System.Diagnostics.Process pProcess = System.Diagnostics.Process.GetProcessById(pP.Id);				
				
					if(pProcess != null)			
					{
						DrawingClearMessage msg = new DrawingClearMessage(0);
						msg.m_ControlType = ControlType.ApplicationSharing;
						msg.SenderID = NetworkManager.thisInstance.profile.ClientId;
						msg.senderProfile = NetworkManager.thisInstance.profile;					
					
						NetworkManager.thisInstance.SendLoadPacket(msg);
						this.whiteBoard.Clear(true,0);	
						sendingThread = new Thread(new ThreadStart(SendingFunction));
						sendingThread.Name = "Application Sharing Sending Thread";
						sendingThread.Start();					
						//appServer.isDesktopWindowInApp = false;
						//pProcess.PriorityBoostEnabled = true; // by kamran
						Win32.USER32.ShowWindow(pProcess.MainWindowHandle, Win32.USER32.SW_SHOWMAXIMIZED );// it is necessory to maximized widow
						appServer.SetCaptureWindowAndStartCapturing(pProcess.MainWindowHandle); // we have to open one time more
					
					

					}
					if(isDesktopSharing)
						pictureBox1.Visible = true;
					else			
					{
						whiteBoard.Visible = false; // to stop annotation kamran
						whiteBoard.BringToFront();					
					}
					//listView1.Visible = false;
					lblINfo.Visible = false;
				
					btnShare.Visible = true;
					btnShare.BringToFront();
				
					btnLog.Visible = true;
					btnLog.BringToFront();

				
				}
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare public void LaunchProcess(int winHandle)",ex,"",false);
			}
		}
		public void Minimize_SmallWindow()
		{
			try
			{
				if(this.frmHostWindow!=null)
				{
					if(this.frmHostWindow.WindowState==System.Windows.Forms.FormWindowState.Maximized ||this.frmHostWindow.WindowState==System.Windows.Forms.FormWindowState.Normal )
					{
						this.frmHostWindow.WindowState=System.Windows.Forms.FormWindowState.Minimized;
					}
				}
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare public void Minimize_SmallWindow()",ex,"",false);
			}
		}
		private void listView1_DoubleClick(object sender, System.EventArgs e)
		{	
			//			try
			//			{
			//				appServer.isWaitingPic = true;
			//				mPreviousImage = null;
			//
			//				if(listView1.SelectedItems.Count < 1)
			//					return;
			//				int nProcessId = (int)listView1.SelectedItems[0].Tag;
			//				LaunchProcess(nProcessId);
			//				
			//			}
			//			catch(Exception ex)
			//			{
			//				//MessageBox.Show(ex.Message + "\n" + ex.StackTrace);
			//			}
			
			#region comment
			//			else if(nProcessId == -1)
			//			{
			//				DrawingClearMessage msg = new DrawingClearMessage(0);
			//				msg.m_ControlType = ControlType.ApplicationSharing;
			//				msg.SenderID = NetworkManager.thisInstance.profile.ClientId;
			//				msg.senderProfile = NetworkManager.thisInstance.profile;					
			//				
			//				NetworkManager.thisInstance.SendLoadPacket(msg);
			//				this.whiteBoard.Clear(true,0);					
			//				sendingThread = new Thread(new ThreadStart(SendingFunction));  
			//				sendingThread.Start();
			//				sendingThread.Name = "Desktop Sharing sending Thread";
			//				appServer.isDesktopWindowInApp = true;
			//				appServer.SetCaptureWindowAndStartCapturing(GetDesktopWindow());
			//				listView1.Visible = false;			
			//				if(isDesktopSharing)
			//					pictureBox1.Visible = true;
			//				else			
			//					whiteBoard.Visible = true;
			//
			//				lblINfo.Visible = false;
			//				btnRefresh.Visible = false;
			//			}
			#endregion
		}

		public void desktopSharingAtClientUI()
		{
			try
			{
				System.Diagnostics.Process pP = System.Diagnostics.Process.GetCurrentProcess();
				System.Diagnostics.Process pProcess = System.Diagnostics.Process.GetProcessById(pP.Id);				
				
				if(pProcess != null)			
				{
					DrawingClearMessage msg = new DrawingClearMessage(0);
					msg.m_ControlType = ControlType.ApplicationSharing;
					msg.SenderID = NetworkManager.thisInstance.profile.ClientId;
					msg.senderProfile = NetworkManager.thisInstance.profile;					
					
					NetworkManager.thisInstance.SendLoadPacket(msg);
					//this.whiteBoard.Clear(true,0);	
					sendingThread = new Thread(new ThreadStart(SendingFunction));
					sendingThread.Name = "Desktop Sharing Sending Thread";
					sendingThread.Start();					
					pProcess.PriorityBoostEnabled = true; // by kamran
					appServer.SetCaptureWindowAndStartCapturing(pProcess.MainWindowHandle); // we have to open one time more
				}
				if(isDesktopSharing)
					pictureBox1.Visible = true;
				else			
				{
					whiteBoard.Visible = false; // to stop annotation kamran
					whiteBoard.BringToFront();
				}
				//listView1.Visible = false;
				lblINfo.Visible = false;
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare public void desktopSharingAtClientUI()",ex,"",false);
			}

		}

		private void button1_Click(object sender, System.EventArgs e)
		{
			try
			{
				appServer.SetCaptureWindowAndStartCapturing(Win32.USER32.GetDesktopWindow());
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare private void button1_Click(object sender, System.EventArgs e)",ex,"",false);
			}
		}

		private void pictureBox1_DoubleClick(object sender, System.EventArgs e)
		{
			try
			{
				if(bSendActivity)
				{
					appServer.SendMouseActivity(Win32.USER32.WM_LBUTTONDBLCLK,new Point(Cursor.Position.X,Cursor.Position.Y));
				}			
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare	private void pictureBox1_DoubleClick(object sender, System.EventArgs e)",ex,"",false);
			}
		}


		public void StopSharing()
		{
			try
			{
				TerminateEx();
				//btnRefresh.Visible = false;
				this.btnShare.Visible=false;
				this.btnLog.Visible=false;
				SelectWindow();
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare	public void StopSharing()",ex,"",false);
			}		
		}


		public void ApplicationSharing_appShareClose()
		{
			//Trace.WriteLine("appServer_OnWindowClosed");
			//			if(this.frmHostWindow!=null)
			//			{
			//				this.frmHostWindow.closeForm();
			//			}
			try
			{
			
				Win32.USER32.SendMessage(HostWindowHandle,USER_CLOSE_FORM,(System.IntPtr)0,(System.IntPtr)0);
				this.UnRegisterKeys();
				StopSharing();
				this.AutoRefresh.Enabled=false;
				this.bIsAppSharingStarted=false;
				this.AutoRefresh.Enabled=true;
				HostWindowHandle=(System.IntPtr)0;
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare	public void ApplicationSharing_appShareClose()",ex,"",false);
			}
			//this.AutoRefresh_Elapsed(null,null);
			
		}
		public void appServer_OnWindowClosed()
		{
			try
			{	
				BeginInvoke(this.appShareClose);
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare	public void appServer_OnWindowClosed()",ex,"",false);
			}
		}
		public void btnShare_Click(object sender, System.EventArgs e)
		{
			try
			{
				if(this.frmHostWindow!=null)
				{
					this.frmHostWindow.closeForm();
				}
				else
				{
					StopSharing();
					this.UnRegisterKeys();
					this.bIsAppSharingStarted=false;
				}
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare	private void btnShare_Click(object sender, System.EventArgs e)",ex,"",false);
			}
		}

		private void pictureBox1_Paint(object sender, System.Windows.Forms.PaintEventArgs e)
		{
			//whiteBoard.DrawArrow(new Point(_temp.X,_temp.Y));
		}


		public void RefreshList()
		{
			try
			{
			

				SelectWindow();
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare	public void RefreshList()",ex,"",false);
			}
		}

		private void btnRefresh_Click(object sender, System.EventArgs e)
		{
			
			try
			{
				SelectWindow();
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare	private void btnRefresh_Click(object sender, System.EventArgs e)",ex,"",false);
			}
		}	
	
		private void whiteBoard_OnScrolling(int nH, int nV)
		{
			try
			{
				if(!this.isDesktopSharing)
				{
					AppSharingMessageEx a = new AppSharingMessageEx();
					a.pData = null;
					a.nDataType = (int)DataType.Scrolling;
					a.X = nH;
					a.Y = nV;
					a.sessionId = nSessionID;			
					a.SenderID = NetworkManager.thisInstance.profile.ClientId;
					a.isDesktopshareing = isDesktopSharing;
					a.ConferenceID = NetworkManager.thisInstance.profile.ConferenceID ;
					SendPacket(a);
				
				}
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare	private void whiteBoard_OnScrolling(int nH, int nV)",ex,"",false);
			}

		}

		int bMouseType = 0;
		Point _mousePoint = new Point(0,0);

		private void AutoRefresh_Elapsed(object sender, System.Timers.ElapsedEventArgs e)
		{
			try
			{

				if(bIsAppSharingStarted==false)
				{
					SelectWindow();
					//RefreshWindow();
				}
			}
			catch(Exception ex)
			{
				WebMeeting.Client.ClientUI.getInstance().ShowExceptionMessage("Module ::: AppShare	private void AutoRefresh_Elapsed(object sender, System.Timers.ElapsedEventArgs e)",ex,"",false);
			}

		}

		private void btnLog_Click(object sender, System.EventArgs e)
		{
		MM_Controller.Send_MinutsofMeetingMsg_Application();
		}

		
		/*private void pictureBox1_Click(object sender, System.EventArgs e)
		{
			try
			{

				//if(System.Environment.TickCount-lasttime>200)
			{
				lasttime=System.Environment.TickCount;
				if(bSendActivity)
				{
					switch(bMouseType)
					{
						case 0:								
							
							appServer.SendMouseActivity(AppSharing.WM_LBUTTONDOWN,_mousePoint);//new Point(_mousePoint.X,e.Y));
							
							appServer.SendMouseActivity(AppSharing.WM_LBUTTONUP,_mousePoint);//new Point(e.X,e.Y));								
							break;
						case 1:
							//appServer.AddDebugString("Snding: WM_RBUTTONDOWN");
							appServer.SendMouseActivity(AppSharing.WM_RBUTTONDOWN,_mousePoint);//new Point(e.X,e.Y));
							//appServer.AddDebugString("Snding: WM_RBUTTONUP");
							appServer.SendMouseActivity(AppSharing.WM_RBUTTONUP,_mousePoint);//new Point(e.X,e.Y));
							break;
					}
						
					
				}
				
			}
			}
			catch(Exception ex)
			{
				//MessageBox.Show(ex.Message + "\n" + ex.StackTrace);
			}
		}*/

		
	}
	public delegate void TakeAnnotationRightsBack();
	public delegate void CloseAppShare();
	public class KeyboardEvent 
	{
		public bool bKeyDown;
		public int keyValue;
	}
	
}